version: 2.1

# These "CircleCI Orbs" are reusable bits of configuration that can be shared
# across projects.  See https://circleci.com/orbs/ for more information.
orbs:
  gh: circleci/github-cli@2.2.0

executors:
  amd_linux_build: &amd_linux_build_executor
    docker:
      - image: cimg/base:stable
    resource_class: medium
  amd_linux_test: &amd_linux_test_executor
    docker:
      - image: cimg/base:stable
      - image: cimg/redis:6.2.6
    resource_class: xlarge
  arm_linux_build: &arm_linux_build_executor
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.large
  arm_linux_test: &arm_linux_test_executor
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.xlarge
  macos_build: &macos_build_executor
    macos:
      # See https://circleci.com/docs/xcode-policy along with the support matrix
      # at https://circleci.com/docs/using-macos#supported-xcode-versions.
      # We use the major.minor notation to bring in compatible patches.
      xcode: 13.4
    resource_class: macos.x86.medium.gen2
  macos_test: &macos_test_executor
    macos:
      # See https://circleci.com/docs/xcode-policy along with the support matrix
      # at https://circleci.com/docs/using-macos#supported-xcode-versions.
      # We use the major.minor notation to bring in compatible patches.
      xcode: 13.4
    resource_class: macos.x86.medium.gen2
  windows_build: &windows_build_executor
    machine:
      image: "windows-server-2019-vs2019:stable"
    resource_class: windows.medium
    shell: powershell.exe -ExecutionPolicy Bypass
  windows_test: &windows_test_executor
    machine:
      image: "windows-server-2019-vs2019:stable"
    resource_class: windows.xlarge
    shell: powershell.exe -ExecutionPolicy Bypass

parameters:
  cache_version:
    type: string
    # increment this to invalidate all the caches
    default: v12.{{ arch}}-{{ checksum "rust-toolchain.toml" }}
  jaeger_version:
    type: string
    # update this as new versions of jaeger become available
    default: "1.33.0"
  protoc_version:
    type: string
    default: "21.8"
  nightly:
    type: boolean
    default: false

# These are common environment variables that we want to set on on all jobs.
# While these could conceivably be set on the CircleCI project settings'
# as "Secrets", these are not really secrets, and its convenient to keep them in
# code.  Also, most of our secrets are not necessary for _most_ of our jobs, so this enables
# forks of the project to run their own tests on their own CircleCI deployments with no
# additional configuration.
common_job_environment: &common_job_environment
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  RUST_BACKTRACE: full

commands:
  linux_install_baseline:
    steps:
      - run:
          name: Update and install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libssl-dev libdw-dev cmake
      - install_minimal_rust
  linux_amd_install_baseline:
    steps:
      - linux_install_baseline
      - run:
          name: Download jaeger
          command: |
            curl -L https://github.com/jaegertracing/jaeger/releases/download/v<< pipeline.parameters.jaeger_version >>/jaeger-<< pipeline.parameters.jaeger_version >>-linux-amd64.tar.gz --output jaeger.tar.gz
            tar -xf jaeger.tar.gz
            mv jaeger-<< pipeline.parameters.jaeger_version >>-linux-amd64 jaeger
      - run:
          name: Install protoc
          command: |
            curl -L https://github.com/protocolbuffers/protobuf/releases/download/v<< pipeline.parameters.protoc_version >>/protoc-<< pipeline.parameters.protoc_version >>-linux-x86_64.zip --output protoc.zip
            unzip protoc.zip -d $HOME/.local
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$BASH_ENV"
  linux_arm_install_baseline:
    steps:
      - linux_install_baseline
      - run:
          name: Download jaeger
          command: |
            curl -L https://github.com/jaegertracing/jaeger/releases/download/v<< pipeline.parameters.jaeger_version >>/jaeger-<< pipeline.parameters.jaeger_version >>-linux-arm64.tar.gz --output jaeger.tar.gz
            tar -xf jaeger.tar.gz
            mv jaeger-<< pipeline.parameters.jaeger_version >>-linux-arm64 jaeger
      - run:
          name: Install protoc
          command: |
            curl -L https://github.com/protocolbuffers/protobuf/releases/download/v<< pipeline.parameters.protoc_version >>/protoc-<< pipeline.parameters.protoc_version >>-linux-aarch_64.zip --output protoc.zip
            unzip protoc.zip -d $HOME/.local
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$BASH_ENV"
  macos_install_baseline:
    steps:
      - run:
          name: Download jaeger
          command: |
            curl -L https://github.com/jaegertracing/jaeger/releases/download/v<< pipeline.parameters.jaeger_version >>/jaeger-<< pipeline.parameters.jaeger_version >>-darwin-amd64.tar.gz --output jaeger.tar.gz
            tar -xf jaeger.tar.gz
            mv jaeger-<< pipeline.parameters.jaeger_version >>-darwin-amd64 jaeger
      - install_minimal_rust
      - run:
          name: Install protoc
          command: |
            curl -L https://github.com/protocolbuffers/protobuf/releases/download/v<< pipeline.parameters.protoc_version >>/protoc-<< pipeline.parameters.protoc_version >>-osx-universal_binary.zip --output protoc.zip
            unzip protoc.zip -d $HOME/.local
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$BASH_ENV"
  windows_install_baseline:
    steps:
      - run:
          name: Download jaeger
          shell: bash.exe
          command: |
            curl -L https://github.com/jaegertracing/jaeger/releases/download/v<< pipeline.parameters.jaeger_version >>/jaeger-<< pipeline.parameters.jaeger_version >>-windows-amd64.tar.gz --output jaeger.tar.gz
            tar -xf jaeger.tar.gz
            mv jaeger-<< pipeline.parameters.jaeger_version >>-windows-amd64 jaeger
      - run:
          name: Install protoc
          shell: bash.exe
          command: |
            curl -L https://github.com/protocolbuffers/protobuf/releases/download/v<< pipeline.parameters.protoc_version >>/protoc-<< pipeline.parameters.protoc_version >>-win64.zip --output protoc.zip
            unzip protoc.zip -d $HOME/.local
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$BASH_ENV"
      - run:
          name: Add protoc to env
          command: |
            $oldpath = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
            $newpath = "$oldpath;$HOME/.local/bin"
            Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newPath

  # This job makes sure everything is ready to run integration tests
  macos_prepare_env:
    steps:
      - run:
          # The jaeger exporter won't work without this
          name: Increase udp packet size
          command: |
            sudo sysctl net.inet.udp.maxdgram=65536
            sudo sysctl net.inet.udp.maxdgram

  windows_prepare_env:
    steps:
      - run:
          name: Install rustup
          environment:
            # Override auto-detection of RAM for Rustc install.
            # https://github.com/rust-lang/rustup/issues/2229#issuecomment-585855925
            RUSTUP_UNPACK_RAM: "1073741824"
          command: |
            $installer_dir = "$Env:TEMP"
            echo "Downloading rustup"
            (New-Object System.Net.WebClient).DownloadFile("https://win.rustup.rs/x86_64", "$installer_dir\rustup-init.exe")
            echo "Installing rustup"
            & $installer_dir\rustup-init.exe -y --default-toolchain none --profile minimal
            exit $LASTEXITCODE
      - run:
          name: Special case for Windows because of ssh-agent
          command: |
            Add-Content -path "${Env:USERPROFILE}\.cargo\config.toml" @"
            [net]
            git-fetch-with-cli = true
            "@

  install_minimal_rust:
    steps:
      - run:
          # Install a minimal rust environment
          name: Install minimal rust
          command: |
            curl https://sh.rustup.rs -sSf -o rustup.sh
            chmod 755 ./rustup.sh
            ./rustup.sh -y --default-toolchain none --profile minimal
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$BASH_ENV"

  install_extra_tools:
    parameters:
      os:
        type: string
    steps:
      - restore_cache:
          keys:
            - rust-<< pipeline.parameters.cache_version >>-extra-tools-<< parameters.os >>

      - when:
          condition:
            equal: [windows, << parameters.os >>]
          steps:
            - run:
                name: Install cargo deny, about, edit
                command: |
                  cargo install --locked cargo-deny cargo-about cargo-edit
            - save_cache:
                name: Save .cargo
                key: rust-<< pipeline.parameters.cache_version >>-extra-tools-<< parameters.os >>
                paths:
                  - C:\\Users\\circleci\\.cargo\\bin\\cargo-about.exe
                  - C:\\Users\\circleci\\.cargo\\bin\\cargo-deny.exe
                  - C:\\Users\\circleci\\.cargo\\bin\\cargo-edit.exe
      - when:
          condition:
            and:
              - not:
                  equal: [windows, << parameters.os >>]
          steps:
            - run:
                name: Install cargo deny if not present
                command: |
                  set -e -o pipefail
                  cargo deny --version || cargo install cargo-deny
            - run:
                name: Install cargo about if not present
                command: |
                  set -e -o pipefail
                  cargo about --version || cargo install cargo-about
            - run:
                name: Install cargo edit if not present
                command: |
                  set -e -o pipefail
                  cargo edit --version || cargo install cargo-edit
            - save_cache:
                key: rust-<< pipeline.parameters.cache_version >>-extra-tools-<< parameters.os >>
                paths:
                  - ~/.cargo/bin/cargo-deny
                  - ~/.cargo/bin/cargo-about

  xtask_lint:
    parameters:
      os:
        type: string
    steps:
      - restore_cache:
          name: Restore .cargo
          keys:
            - rust-cargo-<< pipeline.parameters.cache_version >>-xtask-<< parameters.os >>-{{ checksum "Cargo.lock" }}-{{ checksum "xtask/Cargo.lock" }}
            - rust-cargo-<< pipeline.parameters.cache_version >>-xtask-<< parameters.os >>
      - run:
          name: Install xtask
          command: |
              set -e -o pipefail
              xtask help || { cd xtask && cargo install --path . && cd ..; }
      - run: xtask lint
      - save_cache:
          name: Save .cargo
          key: rust-cargo-<< pipeline.parameters.cache_version >>-xtask-<< parameters.os >>-{{ checksum "Cargo.lock" }}-{{ checksum "xtask/Cargo.lock" }}
          paths:
            - ~/.cargo

  xtask_check_compliance:
    parameters:
      os:
        type: string
    steps:
      - restore_cache:
          name: Restore .cargo
          keys:
            - rust-cargo-<< pipeline.parameters.cache_version >>-xtask-<< parameters.os >>-{{ checksum "Cargo.lock" }}-{{ checksum "xtask/Cargo.lock" }}
            - rust-cargo-<< pipeline.parameters.cache_version >>-xtask-<< parameters.os >>
      - install_extra_tools:
          os: << parameters.os >>
      # cargo-deny fetches a rustsec advisory DB, which has to happen on github.com over https
      - run: git config --global --unset-all url.ssh://git@github.com.insteadof
      - run: cargo xtask check-compliance

  windows_test_workspace:
    steps:
      - run:
          name: Start jaeger
          background: true
          command: jaeger\jaeger-all-in-one.exe
      - restore_cache:
          name: Restore .cargo
          keys:
            - rust-cargo-<< pipeline.parameters.cache_version >>-test-windows-{{ checksum "Cargo.lock" }}
            - rust-cargo-<< pipeline.parameters.cache_version >>-test-windows
      - run: cargo test --workspace --locked
      - save_cache:
          name: Save .cargo
          key: rust-cargo-<< pipeline.parameters.cache_version >>-test-windows-{{ checksum "Cargo.lock" }}
          paths:
            - C:\\Users\\circleci\.cargo

  test_workspace:
    parameters:
      os:
        type: string
      cargo_test_args:
        type: string
        default: "--"
      # additional cache key to have a cache for test_updated
      cache_key:
        type: string
        default: ""
    steps:
      - run:
          name: Start jaeger
          background: true
          command: ./jaeger/jaeger-all-in-one
      - restore_cache:
          name: Restore .cargo
          keys:
            - rust-cargo-<< pipeline.parameters.cache_version >>-test-<< parameters.os >><<parameters.cache_key>>-{{ checksum "Cargo.lock" }}
            - rust-cargo-<< pipeline.parameters.cache_version >>-test-<< parameters.os >><<parameters.cache_key>>

      # As of rustc 1.61.0, must limit the number of linux jobs or we run out of memory (large executor/8GB)
      - when:
          condition:
            equal: [linux_amd, << parameters.os >>]
          steps:
            - run: cargo test --jobs 4 --workspace --locked << parameters.cargo_test_args >> --test-threads=6
      - when:
          condition:
            equal: [linux_arm, << parameters.os >>]
          steps:
            - run: cargo test --jobs 8 --workspace --locked << parameters.cargo_test_args >> --test-threads=8
      - when:
          condition:
            equal: [macos, << parameters.os >>]
          steps:
            - run: cargo test --workspace --locked

      - save_cache:
          name: Save .cargo
          key: rust-cargo-<< pipeline.parameters.cache_version >>-test-<< parameters.os >>-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo

jobs:
  lint:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - when:
          condition:
            equal: [*amd_linux_build_executor, << parameters.platform >>]
          steps:
            - linux_amd_install_baseline
            - xtask_lint:
                os: linux_amd
  check_compliance:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - when:
          condition:
            equal: [*amd_linux_build_executor, << parameters.platform >>]
          steps:
            - linux_amd_install_baseline
            - xtask_check_compliance:
                os: linux_amd

  test:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - when:
          condition:
            equal: [*amd_linux_test_executor, << parameters.platform >>]
          steps:
            - linux_amd_install_baseline
            - test_workspace:
                os: linux_amd
      - when:
          condition:
            equal: [*arm_linux_test_executor, << parameters.platform >>]
          steps:
            - linux_arm_install_baseline
            - test_workspace:
                os: linux_arm
      - when:
          condition:
            equal: [*windows_test_executor, << parameters.platform >>]
          steps:
            - windows_install_baseline
            - windows_prepare_env
            - windows_test_workspace
      - when:
          condition:
            equal: [*macos_test_executor, << parameters.platform >>]
          steps:
            - macos_install_baseline
            - test_workspace:
                os: macos

  test_updated:
    environment:
      <<: *common_job_environment
    executor: amd_linux_test
    steps:
      - checkout
      - linux_amd_install_baseline
      - run:
          name: Update all Rust dependencies
          command: |
            rm Cargo.lock
            cargo fetch
      - test_workspace:
          os: linux_amd
          # schema_generation test skipped because schemars changed its representation of enums:
          # https://github.com/GREsau/schemars/blob/master/CHANGELOG.md#086---2021-09-26
          cargo_test_args: --no-fail-fast -- --skip schema_generation
          cache_key: .test_updated

  build_release:
    parameters:
      platform:
        type: executor
      nightly:
        type: boolean
        default: false
    executor: << parameters.platform >>
    environment:
      <<: *common_job_environment
      RELEASE_BIN: router
      APPLE_TEAM_ID: "YQK948L752"
      APPLE_USERNAME: "opensource@apollographql.com"
      MACOS_PRIMARY_BUNDLE_ID: com.apollographql.router
    steps:
      - checkout
      - when:
          condition:
            equal: [*macos_build_executor, << parameters.platform >>]
          steps:
            - install_minimal_rust
            - macos_install_baseline
            - when:
                condition:
                  equal: [true, << parameters.nightly >>]
                steps:
                  - install_extra_tools:
                      os: macos
                  - run: cargo xtask release prepare nightly
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package
                  --apple-team-id ${APPLE_TEAM_ID}
                  --apple-username ${APPLE_USERNAME}
                  --cert-bundle-base64 ${MACOS_CERT_BUNDLE_BASE64}
                  --cert-bundle-password ${MACOS_CERT_BUNDLE_PASSWORD}
                  --keychain-password ${MACOS_KEYCHAIN_PASSWORD}
                  --notarization-password ${MACOS_NOTARIZATION_PASSWORD}
                  --primary-bundle-id ${MACOS_PRIMARY_BUNDLE_ID}
                  --output artifacts/
      - when:
          condition:
            or:
              - equal: [*amd_linux_build_executor, << parameters.platform >>]
          steps:
            - run:
                name: Update and install dependencies
                command: |
                  sudo apt-get update
            - install_minimal_rust
            - linux_amd_install_baseline
            # This will set the version to inlude current date and commit hash
            - when:
                condition:
                  equal: [true, << parameters.nightly >>]
                steps:
                  - install_extra_tools:
                      os: linux_amd
                  - run: cargo xtask release prepare nightly
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package --output artifacts/
      - when:
          condition:
            or:
              - equal: [ *arm_linux_build_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Update and install dependencies
                command: |
                  sudo apt-get update
            - install_minimal_rust
            - linux_arm_install_baseline
            # This will set the version to inlude current date and commit hash
            - when:
                condition:
                  equal: [true, << parameters.nightly >>]
                steps:
                  - install_extra_tools:
                      os: linux_arm
                  - run: cargo xtask release prepare nightly
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package --output artifacts/
      - when:
          condition:
            equal: [*windows_build_executor, << parameters.platform >>]
          steps:
            - run:
                name: Install rustup
                environment:
                  # Override auto-detection of RAM for Rustc install.
                  # https://github.com/rust-lang/rustup/issues/2229#issuecomment-585855925
                  RUSTUP_UNPACK_RAM: "1073741824"
                command: |
                  $installer_dir = "$Env:TEMP"
                  echo "Downloading rustup"
                  (New-Object System.Net.WebClient).DownloadFile("https://win.rustup.rs/x86_64", "$installer_dir\rustup-init.exe")
                  echo "Installing rustup"
                  & $installer_dir\rustup-init.exe --profile minimal --component rustfmt,clippy -y
                  exit $LASTEXITCODE
            - run:
                name: Special case for Windows because of ssh-agent
                command: |
                  Add-Content -path "${Env:USERPROFILE}\.cargo\config.toml" @"
                  [net]
                  git-fetch-with-cli = true
                  "@
            - windows_install_baseline
            # This will set the version to inlude current date and commit hash
            - when:
                condition:
                  equal: [true, << parameters.nightly >>]
                steps:
                  - install_extra_tools:
                      os: windows
                  - run: cargo xtask release prepare nightly
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package --output artifacts
      - persist_to_workspace:
          root: artifacts
          paths:
            - "*"
      - store_artifacts:
          path: artifacts/

  publish_github_release:
    docker:
      - image: cimg/base:stable
    resource_class: small
    environment:
      <<: *common_job_environment
      VERSION: << pipeline.git.tag >>
    steps:
      - checkout
      - attach_workspace:
          at: artifacts
      - gh/setup
      - run:
          command: >
            cd artifacts && sha256sum *.tar.gz > sha256sums.txt
      - run:
          command: >
            cd artifacts && md5sum *.tar.gz > md5sums.txt
      - run:
          command: >
            cd artifacts && sha1sum *.tar.gz > sha1sums.txt
      - run:
          command: >
            gh release create $VERSION --notes-file /dev/null --title $VERSION artifacts/*
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - run:
          name: Docker build
          command: |
            ROUTER_TAG=ghcr.io/apollographql/router
            # Create a multi-arch builder which works properly under qemu
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker context create buildx-build
            docker buildx create --driver docker-container --use buildx-build
            docker buildx inspect --bootstrap
            # Note: GH Token owned by apollo-bot2, no expire
            echo ${GITHUB_OCI_TOKEN} | docker login ghcr.io -u apollo-bot2 --password-stdin
            # Build and push debug image
            docker buildx build --platform linux/amd64,linux/arm64 --push --build-arg ROUTER_RELEASE=${VERSION} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION}-debug .
            # Build and push release image
            docker buildx build --platform linux/amd64,linux/arm64 --push --build-arg ROUTER_RELEASE=${VERSION} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION} .
      - run:
          name: Helm build
          command: |
            # Install Helm
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            # Package up the helm chart
            helm package helm/chart/router
            # Make sure we have the newest chart
            CHART=$(ls -t router*.tgz| head -1)
            # Note: GH Token owned by apollo-bot2, no expire
            echo ${GITHUB_OCI_TOKEN} | helm registry login -u apollo-bot2 --password-stdin ghcr.io
            # Push chart to repository
            helm push ${CHART} oci://ghcr.io/apollographql/helm-charts

  prepare_release:
    parameters:
      release_type:
        type: string
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - gh/setup
      - linux_install_baseline
      - install_extra_tools:
          os: linux_amd
      - run:
          command: >
            cargo xtask release prepare << parameters.release_type >>

workflows:
  ci_checks:
    when:
      not: << pipeline.parameters.nightly >>
    jobs:
      - lint:
          matrix:
            parameters:
              platform: [amd_linux_build]

      - check_compliance:
          matrix:
            parameters:
              platform: [amd_linux_build]

      - test_updated:
          requires:
            - lint
      - test:
          requires:
            - lint
          matrix:
            parameters:
              platform:
                [macos_test, windows_test, amd_linux_test, arm_linux_test]
      - prepare_major_release_approval:
          type: approval
          requires:
            - test
          filters:
            branches:
              only:
                - dev
      - prepare_minor_release_approval:
          type: approval
          requires:
            - test
          filters:
            branches:
              only:
                - dev
      - prepare_patch_release_approval:
          type: approval
          requires:
            - test
          filters:
            branches:
              only:
                - dev
      - prepare_release:
          name: "Prepare major release"
          release_type: "major"
          requires:
            - prepare_major_release_approval
      - prepare_release:
          name: "Prepare minor release"
          release_type: "minor"
          requires:
            - prepare_minor_release_approval
      - prepare_release:
          name: "Prepare patch release"
          release_type: "patch"
          requires:
            - prepare_patch_release_approval

  nightly:
    when: << pipeline.parameters.nightly >>
    jobs:
      - build_release:
          nightly: true
          matrix:
            parameters:
              platform:
                [macos_build, windows_build, amd_linux_build, arm_linux_build]

  release:
    when:
      not: << pipeline.parameters.nightly >>
    jobs:
      - build_release:
          matrix:
            parameters:
              platform:
                [macos_build, windows_build, amd_linux_build, arm_linux_build]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - publish_github_release:
          requires: [build_release]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/

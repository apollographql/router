version: "3.9"
services:
  postgres:
    image: cimg/postgres:17.6
    security_opt:
      - no-new-privileges:true
    environment:
      POSTGRES_USER: ${USER}
      POSTGRES_DB: ${USER}
    ports:
      - 5432:5432
  zipkin:
    image: openzipkin/zipkin:latest
    security_opt:
      - no-new-privileges:true
    read_only: true
    ports:
      - 9411:9411
  datadog:
    image: ghcr.io/datadog/dd-apm-test-agent/ddapm-test-agent:latest
    security_opt:
      - no-new-privileges:true
    read_only: true
    ports:
      - 8126:8126

  # Note: we run both standalone redis and clustered redis because different integration tests focus on different
  # modes of redis. In the future, it'd be great to

  # standalone redis
  redis:
    image: redis:latest
    security_opt:
      - no-new-privileges:true
    read_only: true
    ports:
      - 6379:6379

  # redis cluster
  redis-cluster-7000:
    image: cimg/redis:7.4.5
    command: [ "redis-server", "--protected-mode", "no", "--port", "7000", "--cluster-enabled", "yes" ]
    ports:
      - 7000:7000
      - 17000:17000
    networks:
      - redis-net

  redis-cluster-7001:
    image: cimg/redis:7.4.5
    command: [ "redis-server", "--protected-mode", "no", "--port", "7001", "--cluster-enabled", "yes" ]
    ports:
      - 7001:7001
      - 17001:17001
    networks:
      - redis-net

  redis-cluster-7002:
    image: cimg/redis:7.4.5
    command: [ "redis-server", "--protected-mode", "no", "--port", "7002", "--cluster-enabled", "yes" ]
    ports:
      - 7002:7002
      - 17002:17002
    networks:
      - redis-net

  redis-cluster-7003:
    image: cimg/redis:7.4.5
    command: [ "redis-server", "--protected-mode", "no", "--port", "7003", "--cluster-enabled", "yes" ]
    ports:
      - 7003:7003
      - 17003:17003
    networks:
      - redis-net

  redis-cluster-7004:
    image: cimg/redis:7.4.5
    command: [ "redis-server", "--protected-mode", "no", "--port", "7004", "--cluster-enabled", "yes" ]
    ports:
      - 7004:7004
      - 17004:17004
    networks:
      - redis-net

  redis-cluster-7005:
    image: cimg/redis:7.4.5
    command: [ "redis-server", "--protected-mode", "no", "--port", "7005", "--cluster-enabled", "yes" ]
    ports:
      - 7005:7005
      - 17005:17005
    networks:
      - redis-net

  # just in case we've already run docker compose up before, we do a hard reset on the cluster to remove any configuration or saved
  # topology data that might have changed between `docker compose up` runs; you can also do a `--force-recreate` with your `docker
  # compose run` to just recreate everything and not worry about anything persisting; we also fire the hard resets off at the same
  # time to try and avoid nodes gossiping stale state to each other
  #
  # we then create the cluster after giving the nodes time to stabilize (the first 30s sleep); after cluster creation, we
  # sleep for another 30s to get through synchronization with enough time to spare for clearing past failures
  #
  # finally, we set the announced hostname to something useable outside of docker so the test binaries can reach it
  #
  # NOTE: you might see a bunch of connection errors across `docker compose run`s because containers might come up with different
  # internal networking (in particular, different IPs for the services) but redis will hold on to cluster info (that's the
  # working theory, it might be wrong)
  redis-cluster-startup:
    image: cimg/redis:7.4.5
    command: |
      sh -c "

        echo 'waiting 30s for cluster'
        sleep 30

        redis-cli -h redis-cluster-7000 -p 7000 FLUSHALL &
        redis-cli -h redis-cluster-7001 -p 7001 FLUSHALL &
        redis-cli -h redis-cluster-7002 -p 7002 FLUSHALL &
        redis-cli -h redis-cluster-7003 -p 7003 FLUSHALL & 
        redis-cli -h redis-cluster-7004 -p 7004 FLUSHALL & 
        redis-cli -h redis-cluster-7005 -p 7005 FLUSHALL &
        wait

        redis-cli -h redis-cluster-7000 -p 7000 CLUSTER RESET HARD &
        redis-cli -h redis-cluster-7001 -p 7001 CLUSTER RESET HARD &
        redis-cli -h redis-cluster-7002 -p 7002 CLUSTER RESET HARD &
        redis-cli -h redis-cluster-7003 -p 7003 CLUSTER RESET HARD & 
        redis-cli -h redis-cluster-7004 -p 7004 CLUSTER RESET HARD & 
        redis-cli -h redis-cluster-7005 -p 7005 CLUSTER RESET HARD &
        wait

        echo 'waiting 30s for cluster config changes'
        sleep 30
    
        echo yes | redis-cli --cluster create --cluster-replicas 1 redis-cluster-7000:7000 redis-cluster-7001:7001 redis-cluster-7002:7002 redis-cluster-7003:7003 redis-cluster-7004:7004 redis-cluster-7005:7005

        echo 'waiting 30s for cluster sync'
        sleep 30

        redis-cli -h redis-cluster-7000 -p 7000 CONFIG SET cluster-announce-hostname localhost
        redis-cli -h redis-cluster-7001 -p 7001 CONFIG SET cluster-announce-hostname localhost
        redis-cli -h redis-cluster-7002 -p 7002 CONFIG SET cluster-announce-hostname localhost
        redis-cli -h redis-cluster-7003 -p 7003 CONFIG SET cluster-announce-hostname localhost
        redis-cli -h redis-cluster-7004 -p 7004 CONFIG SET cluster-announce-hostname localhost
        redis-cli -h redis-cluster-7005 -p 7005 CONFIG SET cluster-announce-hostname localhost 

        echo 'waiting 30s for cluster config'
        sleep 30

        echo 'everything should be good to go! if you see connection errors, please raise a ticket'
      "
    networks:
      - redis-net

networks:
  redis-net:
    driver: bridge

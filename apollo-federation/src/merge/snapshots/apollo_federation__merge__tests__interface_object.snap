---
source: apollo-federation/src/merge/tests.rs
expression: schema.serialize()
---
schema @link(url: "https://specs.apollo.dev/link/v1.0") @link(url: "https://specs.apollo.dev/join/v0.5", for: EXECUTION) {
  query: Query
}

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String, usedOverridden: Boolean, contextArguments: [join__ContextArgument!]) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on INTERFACE | OBJECT

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments!) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

enum link__Purpose {
  """
  SECURITY features provide metadata necessary to securely resolve fields.
  """
  SECURITY
  """EXECUTION features provide metadata necessary for operation execution."""
  EXECUTION
}

scalar link__Import

scalar join__FieldSet

scalar join__FieldValue

input join__ContextArgument {
  name: String!
  type: String!
  context: String!
  selection: join__FieldValue!
}

scalar join__DirectiveArguments

enum join__Graph {
  INTERFACE_OBJECT_1 @join__graph(name: "interface_object_1", url: "")
  INTERFACE_OBJECT_2 @join__graph(name: "interface_object_2", url: "")
  INTERFACE_OBJECT_3 @join__graph(name: "interface_object_3", url: "")
}

interface Itf @join__type(graph: INTERFACE_OBJECT_1, key: "id") @join__type(graph: INTERFACE_OBJECT_2, isInterfaceObject: true, key: "id") @join__type(graph: INTERFACE_OBJECT_3, isInterfaceObject: true, key: "id") {
  id: ID! @join__field(graph: INTERFACE_OBJECT_1, type: "ID!") @join__field(graph: INTERFACE_OBJECT_2, type: "ID!") @join__field(graph: INTERFACE_OBJECT_3, type: "ID!")
  c: Int! @join__field(graph: INTERFACE_OBJECT_2, type: "Int!") @join__field(graph: INTERFACE_OBJECT_3, type: "Int!")
  d: Int! @join__field(graph: INTERFACE_OBJECT_3, type: "Int!")
}

type T1 implements Itf @join__type(graph: INTERFACE_OBJECT_1, key: "id") @join__implements(graph: INTERFACE_OBJECT_1, interface: "Itf") {
  id: ID! @join__field(graph: INTERFACE_OBJECT_1, type: "ID!")
  a: String @join__field(graph: INTERFACE_OBJECT_1, type: "String")
  c: Int! @join__field
  d: Int! @join__field
}

type T2 implements Itf @join__type(graph: INTERFACE_OBJECT_1, key: "id") @join__implements(graph: INTERFACE_OBJECT_1, interface: "Itf") {
  id: ID! @join__field(graph: INTERFACE_OBJECT_1, type: "ID!")
  b: String @join__field(graph: INTERFACE_OBJECT_1, type: "String")
  c: Int! @join__field
  d: Int! @join__field
}

type Query @join__type(graph: INTERFACE_OBJECT_1) @join__type(graph: INTERFACE_OBJECT_2) @join__type(graph: INTERFACE_OBJECT_3) {
  itfs: [Itf] @join__field(graph: INTERFACE_OBJECT_2, type: "[Itf]")
  itf(id: ID!): Itf @join__field(graph: INTERFACE_OBJECT_3, type: "Itf")
  itf2(id: ID!): Itf2 @join__field(graph: INTERFACE_OBJECT_3, type: "Itf2")
}

interface Itf2 @join__type(graph: INTERFACE_OBJECT_3, isInterfaceObject: true, key: "id") {
  id: ID! @join__field(graph: INTERFACE_OBJECT_3, type: "ID!")
}

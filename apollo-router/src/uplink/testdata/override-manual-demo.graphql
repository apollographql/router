schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.4", for: EXECUTION) {
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
  overrideLabel: String
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  S1 @join__graph(name: "S1", url: "http://localhost:4001")
  S2 @join__graph(name: "S2", url: "http://localhost:4002")
}

scalar link__Import

enum link__Purpose {
  """
  \`SECURITY\` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  \`EXECUTION\` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query @join__type(graph: S1) @join__type(graph: S2) {
  t: T @join__field(graph: S1)
  t2: T2 @join__field(graph: S1)
}

type T @join__type(graph: S1, key: "id") @join__type(graph: S2, key: "id") {
  id: ID!
  f1: String
    @join__field(graph: S2, override: "S1", overrideLabel: "percent(50)")
  f2: String @join__field(graph: S2)
}

type T2 @join__type(graph: S1, key: "id") @join__type(graph: S2, key: "id") {
  id: ID!
  f1: String
    @join__field(graph: S1, override: "S2", overrideLabel: "percent(50)")
  t: T @join__field(graph: S1)
  f2: String @join__field(graph: S2)
}

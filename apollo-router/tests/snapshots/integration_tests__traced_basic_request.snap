---
source: apollo-router/tests/integration_tests.rs
assertion_line: 78
expression: get_spans()

---
{
  "name": "integration_tests::root",
  "record": {
    "entries": [],
    "metadata": {
      "name": "root",
      "target": "integration_tests",
      "level": "INFO",
      "module_path": "integration_tests",
      "fields": {
        "names": []
      }
    }
  },
  "children": {
    "apollo_router::apollo_router::prepare_query": {
      "name": "apollo_router::apollo_router::prepare_query",
      "record": {
        "entries": [
          [
            "message",
            "query plan\nQueryPlan {\n    root: Fetch(\n        FetchNode {\n            service_name: \"products\",\n            requires: [],\n            variable_usages: [],\n            operation: \"{topProducts{name name2:name}}\",\n        },\n    ),\n}"
          ]
        ],
        "metadata": {
          "name": "prepare_query",
          "target": "apollo_router::apollo_router",
          "level": "DEBUG",
          "module_path": "apollo_router::apollo_router",
          "fields": {
            "names": []
          }
        }
      },
      "children": {
        "apollo_router::apollo_router::query_parsing": {
          "name": "apollo_router::apollo_router::query_parsing",
          "record": {
            "entries": [],
            "metadata": {
              "name": "query_parsing",
              "target": "apollo_router::apollo_router",
              "level": "INFO",
              "module_path": "apollo_router::apollo_router",
              "fields": {
                "names": []
              }
            }
          },
          "children": {}
        },
        "apollo_router_core::spec::query::validate_variables": {
          "name": "apollo_router_core::spec::query::validate_variables",
          "record": {
            "entries": [
              [
                "message",
                "Received variable unknown to the query: [\"reviewsForAuthorAuthorId\", \"topProductsFirst\"]"
              ]
            ],
            "metadata": {
              "name": "validate_variables",
              "target": "apollo_router_core::spec::query",
              "level": "TRACE",
              "module_path": "apollo_router_core::spec::query",
              "fields": {
                "names": []
              }
            }
          },
          "children": {}
        },
        "apollo_router_core::query_planner::router_bridge_query_planner::plan": {
          "name": "apollo_router_core::query_planner::router_bridge_query_planner::plan",
          "record": {
            "entries": [],
            "metadata": {
              "name": "plan",
              "target": "apollo_router_core::query_planner::router_bridge_query_planner",
              "level": "DEBUG",
              "module_path": "apollo_router_core::query_planner::router_bridge_query_planner",
              "fields": {
                "names": []
              }
            }
          },
          "children": {}
        },
        "apollo_router_core::query_planner::validate": {
          "name": "apollo_router_core::query_planner::validate",
          "record": {
            "entries": [],
            "metadata": {
              "name": "validate",
              "target": "apollo_router_core::query_planner",
              "level": "DEBUG",
              "module_path": "apollo_router_core::query_planner",
              "fields": {
                "names": []
              }
            }
          },
          "children": {}
        }
      }
    },
    "apollo_router::apollo_router::execute": {
      "name": "apollo_router::apollo_router::execute",
      "record": {
        "entries": [],
        "metadata": {
          "name": "execute",
          "target": "apollo_router::apollo_router",
          "level": "DEBUG",
          "module_path": "apollo_router::apollo_router",
          "fields": {
            "names": []
          }
        }
      },
      "children": {
        "apollo_router::apollo_router::execution": {
          "name": "apollo_router::apollo_router::execution",
          "record": {
            "entries": [
              [
                "message",
                "Executing plan:\nFetch(\n    FetchNode {\n        service_name: \"products\",\n        requires: [],\n        variable_usages: [],\n        operation: \"{topProducts{name name2:name}}\",\n    },\n)"
              ]
            ],
            "metadata": {
              "name": "execution",
              "target": "apollo_router::apollo_router",
              "level": "TRACE",
              "module_path": "apollo_router::apollo_router",
              "fields": {
                "names": []
              }
            }
          },
          "children": {
            "apollo_router_core::query_planner::fetch": {
              "name": "apollo_router_core::query_planner::fetch",
              "record": {
                "entries": [],
                "metadata": {
                  "name": "fetch",
                  "target": "apollo_router_core::query_planner",
                  "level": "TRACE",
                  "module_path": "apollo_router_core::query_planner",
                  "fields": {
                    "names": []
                  }
                }
              },
              "children": {
                "apollo_router_core::query_planner::fetch::subfetch": {
                  "name": "apollo_router_core::query_planner::fetch::subfetch",
                  "record": {
                    "entries": [
                      [
                        "service",
                        "products"
                      ]
                    ],
                    "metadata": {
                      "name": "subfetch",
                      "target": "apollo_router_core::query_planner::fetch",
                      "level": "TRACE",
                      "module_path": "apollo_router_core::query_planner::fetch",
                      "fields": {
                        "names": [
                          "service"
                        ]
                      }
                    }
                  },
                  "children": {
                    "apollo_router_core::query_planner::fetch::make_variables": {
                      "name": "apollo_router_core::query_planner::fetch::make_variables",
                      "record": {
                        "entries": [],
                        "metadata": {
                          "name": "make_variables",
                          "target": "apollo_router_core::query_planner::fetch",
                          "level": "DEBUG",
                          "module_path": "apollo_router_core::query_planner::fetch",
                          "fields": {
                            "names": []
                          }
                        }
                      },
                      "children": {}
                    },
                    "apollo_router_core::query_planner::fetch::subfetch_stream": {
                      "name": "apollo_router_core::query_planner::fetch::subfetch_stream",
                      "record": {
                        "entries": [],
                        "metadata": {
                          "name": "subfetch_stream",
                          "target": "apollo_router_core::query_planner::fetch",
                          "level": "TRACE",
                          "module_path": "apollo_router_core::query_planner::fetch",
                          "fields": {
                            "names": []
                          }
                        }
                      },
                      "children": {
                        "apollo_router::http_subgraph::http-subgraph-request": {
                          "name": "apollo_router::http_subgraph::http-subgraph-request",
                          "record": {
                            "entries": [
                              [
                                "message",
                                "Request to service products: Request { method: POST, url: Url { scheme: \"http\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"localhost\")), port: Some(4003), path: \"/graphql\", query: None, fragment: None }, headers: {\"content-type\": \"application/json\"} }"
                              ],
                              [
                                "message",
                                "Response from service products: Ok(Response { url: Url { scheme: \"http\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"localhost\")), port: Some(4003), path: \"/graphql\", query: None, fragment: None }, status: 200, headers: {\"access-control-allow-origin\": \"*\", \"content-type\": \"application/json; charset=utf-8\", \"content-length\": \"126\", \"etag\": \"W/\\\"7e-K2S/IIFA8IW4a9FdEm3St7vymck\\\"\", \"date\": \"Wed, 02 Feb 2022 10:54:16 GMT\", \"connection\": \"keep-alive\", \"keep-alive\": \"timeout=5\"} })"
                              ]
                            ],
                            "metadata": {
                              "name": "http-subgraph-request",
                              "target": "apollo_router::http_subgraph",
                              "level": "TRACE",
                              "module_path": "apollo_router::http_subgraph",
                              "fields": {
                                "names": []
                              }
                            }
                          },
                          "children": {
                            "reqwest_tracing::middleware::HTTP request": {
                              "name": "reqwest_tracing::middleware::HTTP request",
                              "record": {
                                "entries": [
                                  [
                                    "http.method",
                                    "POST"
                                  ],
                                  [
                                    "http.scheme",
                                    "http"
                                  ],
                                  [
                                    "http.host",
                                    "localhost"
                                  ],
                                  [
                                    "net.host.port",
                                    "4003"
                                  ],
                                  [
                                    "otel.kind",
                                    "client"
                                  ],
                                  [
                                    "otel.name",
                                    "POST /graphql"
                                  ],
                                  [
                                    "otel.status_code",
                                    "OK"
                                  ],
                                  [
                                    "http.status_code",
                                    200
                                  ],
                                  [
                                    "http.user_agent",
                                    ""
                                  ]
                                ],
                                "metadata": {
                                  "name": "HTTP request",
                                  "target": "reqwest_tracing::middleware",
                                  "level": "INFO",
                                  "module_path": "reqwest_tracing::middleware",
                                  "fields": {
                                    "names": [
                                      "http.method",
                                      "http.scheme",
                                      "http.host",
                                      "net.host.port",
                                      "otel.kind",
                                      "otel.name",
                                      "otel.status_code",
                                      "http.user_agent",
                                      "http.status_code",
                                      "error.message",
                                      "error.cause_chain"
                                    ]
                                  }
                                }
                              },
                              "children": {}
                            }
                          }
                        },
                        "apollo_router::http_subgraph::aggregate_response_data": {
                          "name": "apollo_router::http_subgraph::aggregate_response_data",
                          "record": {
                            "entries": [],
                            "metadata": {
                              "name": "aggregate_response_data",
                              "target": "apollo_router::http_subgraph",
                              "level": "DEBUG",
                              "module_path": "apollo_router::http_subgraph",
                              "fields": {
                                "names": []
                              }
                            }
                          },
                          "children": {}
                        },
                        "apollo_router::http_subgraph::parse_subgraph_response": {
                          "name": "apollo_router::http_subgraph::parse_subgraph_response",
                          "record": {
                            "entries": [],
                            "metadata": {
                              "name": "parse_subgraph_response",
                              "target": "apollo_router::http_subgraph",
                              "level": "DEBUG",
                              "module_path": "apollo_router::http_subgraph",
                              "fields": {
                                "names": []
                              }
                            }
                          },
                          "children": {}
                        }
                      }
                    },
                    "apollo_router_core::query_planner::fetch::response_insert": {
                      "name": "apollo_router_core::query_planner::fetch::response_insert",
                      "record": {
                        "entries": [],
                        "metadata": {
                          "name": "response_insert",
                          "target": "apollo_router_core::query_planner::fetch",
                          "level": "DEBUG",
                          "module_path": "apollo_router_core::query_planner::fetch",
                          "fields": {
                            "names": []
                          }
                        }
                      },
                      "children": {}
                    }
                  }
                }
              }
            }
          }
        },
        "apollo_router::apollo_router::format_response": {
          "name": "apollo_router::apollo_router::format_response",
          "record": {
            "entries": [],
            "metadata": {
              "name": "format_response",
              "target": "apollo_router::apollo_router",
              "level": "DEBUG",
              "module_path": "apollo_router::apollo_router",
              "fields": {
                "names": []
              }
            }
          },
          "children": {
            "apollo_router_core::spec::query::format_response": {
              "name": "apollo_router_core::spec::query::format_response",
              "record": {
                "entries": [],
                "metadata": {
                  "name": "format_response",
                  "target": "apollo_router_core::spec::query",
                  "level": "TRACE",
                  "module_path": "apollo_router_core::spec::query",
                  "fields": {
                    "names": []
                  }
                }
              },
              "children": {}
            }
          }
        }
      }
    },
    "apollo_router::http_subgraph::http-subgraph-request": {
      "name": "apollo_router::http_subgraph::http-subgraph-request",
      "record": {
        "entries": [
          [
            "message",
            "Request to service federated: Request { method: POST, url: Url { scheme: \"http\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"localhost\")), port: Some(4100), path: \"/graphql\", query: None, fragment: None }, headers: {\"content-type\": \"application/json\"} }"
          ],
          [
            "message",
            "Response from service federated: Ok(Response { url: Url { scheme: \"http\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"localhost\")), port: Some(4100), path: \"/graphql\", query: None, fragment: None }, status: 200, headers: {\"access-control-allow-origin\": \"*\", \"content-type\": \"application/json; charset=utf-8\", \"content-length\": \"126\", \"etag\": \"W/\\\"7e-K2S/IIFA8IW4a9FdEm3St7vymck\\\"\", \"date\": \"Wed, 02 Feb 2022 10:54:16 GMT\", \"connection\": \"keep-alive\", \"keep-alive\": \"timeout=5\"} })"
          ]
        ],
        "metadata": {
          "name": "http-subgraph-request",
          "target": "apollo_router::http_subgraph",
          "level": "TRACE",
          "module_path": "apollo_router::http_subgraph",
          "fields": {
            "names": []
          }
        }
      },
      "children": {
        "reqwest_tracing::middleware::HTTP request": {
          "name": "reqwest_tracing::middleware::HTTP request",
          "record": {
            "entries": [
              [
                "http.method",
                "POST"
              ],
              [
                "http.scheme",
                "http"
              ],
              [
                "http.host",
                "localhost"
              ],
              [
                "net.host.port",
                "4100"
              ],
              [
                "otel.kind",
                "client"
              ],
              [
                "otel.name",
                "POST /graphql"
              ],
              [
                "otel.status_code",
                "OK"
              ],
              [
                "http.status_code",
                200
              ],
              [
                "http.user_agent",
                ""
              ]
            ],
            "metadata": {
              "name": "HTTP request",
              "target": "reqwest_tracing::middleware",
              "level": "INFO",
              "module_path": "reqwest_tracing::middleware",
              "fields": {
                "names": [
                  "http.method",
                  "http.scheme",
                  "http.host",
                  "net.host.port",
                  "otel.kind",
                  "otel.name",
                  "otel.status_code",
                  "http.user_agent",
                  "http.status_code",
                  "error.message",
                  "error.cause_chain"
                ]
              }
            }
          },
          "children": {}
        }
      }
    },
    "apollo_router::http_subgraph::aggregate_response_data": {
      "name": "apollo_router::http_subgraph::aggregate_response_data",
      "record": {
        "entries": [],
        "metadata": {
          "name": "aggregate_response_data",
          "target": "apollo_router::http_subgraph",
          "level": "DEBUG",
          "module_path": "apollo_router::http_subgraph",
          "fields": {
            "names": []
          }
        }
      },
      "children": {}
    },
    "apollo_router::http_subgraph::parse_subgraph_response": {
      "name": "apollo_router::http_subgraph::parse_subgraph_response",
      "record": {
        "entries": [],
        "metadata": {
          "name": "parse_subgraph_response",
          "target": "apollo_router::http_subgraph",
          "level": "DEBUG",
          "module_path": "apollo_router::http_subgraph",
          "fields": {
            "names": []
          }
        }
      },
      "children": {}
    }
  }
}

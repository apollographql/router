# This is an invalid supergraph generated with a version of JS composition
# that does not validate satisfiability.
#
# File: validation_errors.test.ts
# Test name: @interfaceObject fails on @interfaceObject with some unreachable implementation

schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
  overrideLabel: String
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

type A implements I
  @join__implements(graph: SUBGRAPHA, interface: "I")
  @join__type(graph: SUBGRAPHA, key: "id")
  @join__type(graph: SUBGRAPHC) {
  id: ID! @join__field(graph: SUBGRAPHA)
  x: Int @join__field(graph: SUBGRAPHA)
  z: Int @join__field(graph: SUBGRAPHC)
  y: Int @join__field
}

type B implements I
  @join__implements(graph: SUBGRAPHA, interface: "I")
  @join__type(graph: SUBGRAPHA, key: "id") {
  id: ID!
  x: Int
  y: Int @join__field
}

interface I
  @join__type(graph: SUBGRAPHA, key: "id")
  @join__type(graph: SUBGRAPHB, key: "id", isInterfaceObject: true) {
  id: ID!
  x: Int @join__field(graph: SUBGRAPHA)
  y: Int @join__field(graph: SUBGRAPHB)
}

scalar join__FieldSet

enum join__Graph {
  SUBGRAPHA @join__graph(name: "subgraphA", url: "")
  SUBGRAPHB @join__graph(name: "subgraphB", url: "")
  SUBGRAPHC @join__graph(name: "subgraphC", url: "")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: SUBGRAPHA)
  @join__type(graph: SUBGRAPHB)
  @join__type(graph: SUBGRAPHC) {
  iFromB: I @join__field(graph: SUBGRAPHB)
}

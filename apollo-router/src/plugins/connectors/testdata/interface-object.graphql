schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.5", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/connect/v0.1", for: EXECUTION)
  @join__directive(
    graphs: [CONNECTORS]
    name: "link"
    args: {
      url: "https://specs.apollo.dev/connect/v0.1"
      import: ["@connect", "@source"]
    }
  )
  @join__directive(
    graphs: [CONNECTORS]
    name: "source"
    args: { name: "json", http: { baseURL: "http://localhost:4001" } }
  ) {
  query: Query
}

directive @join__directive(
  graphs: [join__Graph!]
  name: String!
  args: join__DirectiveArguments
) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
  overrideLabel: String
  contextArguments: [join__ContextArgument!]
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

interface Itf
  @join__type(graph: CONNECTORS, key: "id", isInterfaceObject: true)
  @join__type(graph: GRAPHQL, key: "id") {
  id: ID!
  c: Int! @join__field(graph: CONNECTORS)
  d: Int! @join__field(graph: CONNECTORS)
  e: String
    @join__field(graph: CONNECTORS)
    @join__directive(
      graphs: [CONNECTORS]
      name: "connect"
      args: {
        source: "json"
        http: { GET: "/itfs/{$this.id}/e" }
        selection: "$"
      }
    )
}

input join__ContextArgument {
  name: String!
  type: String!
  context: String!
  selection: join__FieldValue!
}

scalar join__DirectiveArguments

scalar join__FieldSet

scalar join__FieldValue

enum join__Graph {
  CONNECTORS @join__graph(name: "connectors", url: "none")
  GRAPHQL @join__graph(name: "graphql", url: "none")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query @join__type(graph: CONNECTORS) @join__type(graph: GRAPHQL) {
  itfs: [Itf]
    @join__field(graph: CONNECTORS)
    @join__directive(
      graphs: [CONNECTORS]
      name: "connect"
      args: { source: "json", http: { GET: "/itfs" }, selection: "id c" }
    )
  itf(id: ID!): Itf
    @join__field(graph: CONNECTORS)
    @join__directive(
      graphs: [CONNECTORS]
      name: "connect"
      args: {
        source: "json"
        http: { GET: "/itfs/{$args.id}" }
        selection: "id c d"
        entity: true
      }
    )
}

type T1 implements Itf
  @join__implements(graph: GRAPHQL, interface: "Itf")
  @join__type(graph: GRAPHQL, key: "id") {
  id: ID!
  a: String
  c: Int! @join__field
  d: Int! @join__field
  e: String @join__field
}

type T2 implements Itf
  @join__implements(graph: GRAPHQL, interface: "Itf")
  @join__type(graph: GRAPHQL, key: "id") {
  id: ID!
  b: String
  c: Int! @join__field
  d: Int! @join__field
  e: String @join__field
}

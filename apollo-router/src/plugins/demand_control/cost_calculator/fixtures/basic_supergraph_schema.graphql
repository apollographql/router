schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type FirstObjectType
  @join__type(graph: PRODUCTS)
{
  field1: Int
  innerList: [SecondObjectType]
}

input InnerInput
  @join__type(graph: PRODUCTS)
{
  id: ID
}

scalar join__FieldSet

enum join__Graph {
  PRODUCTS @join__graph(name: "products", url: "http://localhost:4000")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: PRODUCTS)
{
  doSomething: Int
}

interface MyInterface
  @join__type(graph: PRODUCTS)
{
  field2: String
}

input OuterInput
  @join__type(graph: PRODUCTS)
{
  inner: InnerInput
  inner2: InnerInput
  listOfInner: [InnerInput!]
}

type Query
  @join__type(graph: PRODUCTS)
{
  getScalar(id: ID): String
  getScalarByObject(args: OuterInput): String
  anotherScalar: Int
  object1: FirstObjectType
  interfaceInstance1: MyInterface
  someUnion: UnionOfObjectTypes
  someObjects: [FirstObjectType]
  intList: [Int]
  getObjectsByObject(args: OuterInput): [SecondObjectType]
}

type SecondObjectType implements MyInterface
  @join__implements(graph: PRODUCTS, interface: "MyInterface")
  @join__type(graph: PRODUCTS)
{
  field1: Int
  field2: String
}

union UnionOfObjectTypes
  @join__type(graph: PRODUCTS)
  @join__unionMember(graph: PRODUCTS, member: "FirstObjectType")
  @join__unionMember(graph: PRODUCTS, member: "SecondObjectType")
 = FirstObjectType | SecondObjectType

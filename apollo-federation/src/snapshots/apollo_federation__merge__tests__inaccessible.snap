---
source: apollo-federation/src/merge.rs
expression: schema.serialize()
---
schema @link(url: "https://specs.apollo.dev/link/v1.0") @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY) {
  query: Query
}

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on INTERFACE | OBJECT

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

enum link__Purpose {
  """
  SECURITY features provide metadata necessary to securely resolve fields.
  """
  SECURITY
  """EXECUTION features provide metadata necessary for operation execution."""
  EXECUTION
}

scalar link__Import

scalar join__FieldSet

enum join__Graph {
  INACCESSIBLE @join__graph(name: "inaccessible", url: "")
  INACCESSIBLE_2 @join__graph(name: "inaccessible_2", url: "")
}

type Query @join__type(graph: INACCESSIBLE) @join__type(graph: INACCESSIBLE_2) {
  a(
    input: Input @inaccessible,
  ): A @join__field(graph: INACCESSIBLE)
  b: B @inaccessible @join__field(graph: INACCESSIBLE)
  as: [A] @inaccessible @join__field(graph: INACCESSIBLE_2)
}

type A @join__type(graph: INACCESSIBLE, key: "id") @join__type(graph: INACCESSIBLE_2, key: "id") {
  id: ID! @join__field(graph: INACCESSIBLE) @join__field(graph: INACCESSIBLE_2)
  c: Int @inaccessible @join__field(graph: INACCESSIBLE) @join__field(graph: INACCESSIBLE_2)
  d: Enum @inaccessible @join__field(graph: INACCESSIBLE)
}

type B implements Interface @join__type(graph: INACCESSIBLE) @inaccessible @join__implements(graph: INACCESSIBLE, interface: "Interface") {
  b: Scalar @join__field(graph: INACCESSIBLE)
}

enum Enum @join__type(graph: INACCESSIBLE) @inaccessible {
  A @join__enumValue(graph: INACCESSIBLE)
  B @join__enumValue(graph: INACCESSIBLE)
  C @inaccessible @join__enumValue(graph: INACCESSIBLE)
}

input Input @join__type(graph: INACCESSIBLE) @inaccessible {
  a: Int @inaccessible
  b: String
}

scalar Scalar @join__type(graph: INACCESSIBLE) @inaccessible

interface Interface @join__type(graph: INACCESSIBLE) @inaccessible {
  b: Scalar
}

union Union @join__type(graph: INACCESSIBLE) @inaccessible @join__unionMember(graph: INACCESSIBLE, member: "A") @join__unionMember(graph: INACCESSIBLE, member: "B") = A | B

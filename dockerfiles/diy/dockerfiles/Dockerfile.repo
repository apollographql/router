# Use the rust build image from docker as our base
# renovate-automation: rustc version
#FROM rust:1.87.0 AS build
FROM rust:1.89-bookworm

WORKDIR /app

# Update our build image and install required packages
RUN apt-get update
RUN apt-get -y install \
    protobuf-compiler

# Add rustfmt since build requires it
RUN rustup component add rustfmt

COPY . .

# Build and install the router
#RUN cargo install --path apollo-router
# Install cargo-watch
RUN cargo install cargo-watch

# Make directories for config and schema
#RUN mkdir -p /dist/config && \
#    mkdir /dist/schema && \
#    mv /usr/local/cargo/bin/router /dist
RUN mkdir -p /dist/config && \
    mkdir /dist/schema 

# Copy configuration for docker image
COPY dockerfiles/router.yaml /dist/config

# Build our final image
#FROM debian:bookworm-slim

ARG DEBUG_IMAGE=true

# Update apt and install ca-certificates
RUN \
  apt-get update -y \
  && apt-get install -y \
    ca-certificates

# Copy in the required files from our build image

# If debug image, install a bunch of useful debugging stuff and make a data directory
RUN \
  if [ "${DEBUG_IMAGE}" = "true" ]; then \
    apt-get install -y \
    dnsutils \
    procps \
    heaptrack \
    gdb \
    heaptrack-gui \
    x11-apps \
    iputils-ping && \
    mkdir data; \
  fi

# Clean up apt lists
RUN rm -rf /var/lib/apt/lists/*

# Set labels for our image
LABEL org.opencontainers.image.authors="Apollo Graph, Inc. https://github.com/apollographql/router"
LABEL org.opencontainers.image.source="https://github.com/apollographql/router"

ENV APOLLO_ROUTER_CONFIG_PATH="/dist/config/router.yaml"

EXPOSE 6669 

# Create a wrapper script to run the router, use exec to ensure signals are handled correctly
RUN \
  echo '#!/usr/bin/env bash \
\nset -e \
\n \
\nif [ -f "/usr/bin/heaptrack" ]; then \
\n    exec heaptrack -o /dist/data/router_heaptrack /dist/router "$@" \
\nelse \
\n    exec /dist/router "$@" \
\nfi \
' > /dist/router_wrapper.sh

# Make sure we can run our wrapper
RUN chmod 755 /dist/router_wrapper.sh

# Expose the router port
EXPOSE 4000

# ENTRYPOINT runs cargo-watch
ENTRYPOINT ["cargo", "watch", "-x", "run --features console -- --supergraph /app/supergraph.graphql --config /app/router-config.entity-caching.yaml --listen 0.0.0.0:4000"]

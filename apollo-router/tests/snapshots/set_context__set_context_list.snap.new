---
source: apollo-router/tests/set_context.rs
assertion_line: 88
expression: response
---
{
  "data": {
    "t": {
      "id": "1",
      "uList": [
        null,
        null,
        null
      ]
    }
  },
  "errors": [
    {
      "message": "couldn't find mock for query {\"query\":\"query Query__Subgraph1__1($representations:[_Any!]!$contextualArgument_1_0:String){_entities(representations:$representations){...on U{field(a:$contextualArgument_1_0)}}}\",\"operationName\":\"Query__Subgraph1__1\",\"variables\":{\"contextualArgument_1_0\":\"prop value\",\"representations\":[{\"__typename\":\"U\",\"id\":\"1\"},{\"__typename\":\"U\",\"id\":\"2\"},{\"__typename\":\"U\",\"id\":\"3\"}]}}",
      "extensions": {
        "code": "FETCH_ERROR"
      }
    }
  ],
  "extensions": {
    "valueCompletion": [
      {
        "message": "Cannot return null for non-nullable field U.field",
        "path": [
          "t",
          "uList",
          0
        ]
      },
      {
        "message": "Cannot return null for non-nullable field U.field",
        "path": [
          "t",
          "uList",
          1
        ]
      },
      {
        "message": "Cannot return null for non-nullable field U.field",
        "path": [
          "t",
          "uList",
          2
        ]
      }
    ],
    "apolloQueryPlan": {
      "object": {
        "kind": "QueryPlan",
        "node": {
          "kind": "Sequence",
          "nodes": [
            {
              "kind": "Fetch",
              "serviceName": "Subgraph1",
              "variableUsages": [],
              "operation": "query Query__Subgraph1__0{t{prop id uList{__typename id}}}",
              "operationName": "Query__Subgraph1__0",
              "operationKind": "query",
              "id": null,
              "inputRewrites": null,
              "outputRewrites": null,
              "contextRewrites": null,
              "schemaAwareHash": "904cce765299d4ec167658b15259c8bc8c3093af5bb33db4d2979827472646cd",
              "authorization": {
                "is_authenticated": false,
                "scopes": [],
                "policies": []
              }
            },
            {
              "kind": "Flatten",
              "path": [
                "",
                "t",
                "uList",
                "@"
              ],
              "node": {
                "kind": "Fetch",
                "serviceName": "Subgraph1",
                "requires": [
                  {
                    "kind": "InlineFragment",
                    "typeCondition": "U",
                    "selections": [
                      {
                        "kind": "Field",
                        "name": "__typename"
                      },
                      {
                        "kind": "Field",
                        "name": "id"
                      }
                    ]
                  }
                ],
                "variableUsages": [
                  "contextualArgument_1_0"
                ],
                "operation": "query Query__Subgraph1__1($representations:[_Any!]!$contextualArgument_1_0:String){_entities(representations:$representations){...on U{field(a:$contextualArgument_1_0)}}}",
                "operationName": "Query__Subgraph1__1",
                "operationKind": "query",
                "id": null,
                "inputRewrites": null,
                "outputRewrites": null,
                "contextRewrites": [
                  {
                    "kind": "KeyRenamer",
                    "path": [
                      "..",
                      "... on T",
                      "prop"
                    ],
                    "renameKeyTo": "contextualArgument_1_0"
                  }
                ],
                "schemaAwareHash": "66b954f39aead8436321c671eb71e56ce15bbe0c7b82f06b2f8f70473ce1cb6e",
                "authorization": {
                  "is_authenticated": false,
                  "scopes": [],
                  "policies": []
                }
              }
            }
          ]
        }
      },
      "text": "QueryPlan {\n  Sequence {\n    Fetch(service: \"Subgraph1\") {\n      {\n        t {\n          prop\n          id\n          uList {\n            __typename\n            id\n          }\n        }\n      }\n    },\n    Flatten(path: \".t.uList.@\") {\n      Fetch(service: \"Subgraph1\") {\n        {\n          ... on U {\n            __typename\n            id\n          }\n        } =>\n        {\n          ... on U {\n            field(a: $contextualArgument_1_0)\n          }\n        }\n      },\n    },\n  },\n}"
    }
  }
}

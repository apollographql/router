feat: implement comprehensive error handling system with explicit GraphQL extension control

Introduces a complete error handling solution for Apollo Router Core with automatic
derive macros, explicit GraphQL extension field control, and comprehensive
documentation.

Core Features:
- Error derive macro with automatic trait implementation
- Explicit #[extension] attributes for GraphQL field control
- Automatic error registry using linkme for introspection
- Re-exported convenience imports for better developer experience
- Rich diagnostic support with miette and thiserror integration

Extension Attribute System:
- #[extension("customName")] for explicit field naming in GraphQL extensions
- #[extension] for automatic camelCase conversion (error_code â†’ "errorCode")
- Only fields with explicit #[extension] attributes appear in GraphQL errors
- Fields with #[source], #[source_code], #[from] automatically excluded
- Provides precise control over exposed error information

Technical Implementation:
- Added apollo-router-error-derive crate with procedural macro
- Implemented extension attribute parsing and camelCase conversion
- Generated match arms only bind extension fields, use wildcard for others
- Added apollo-router-error crate with trait definitions and re-exports
- Automatic error code extraction from #[diagnostic(code(...))] attributes
- Error registry generation for introspection and tooling

Re-export System:
- apollo_router_error::Error provides both trait and derive macro
- Convenient single import: use apollo_router_error::Error;
- Added thiserror dependency for documentation examples
- Created examples/reexport_demo.rs demonstrating usage

Testing Infrastructure:
- Updated all tests to use new extension attribute system
- Created comprehensive unit tests for derive macro functionality
- Added integration tests in tests/derive_works.rs
- Updated macro expansion tests with new expected outputs
- Added camelCase conversion and extension parsing tests

Documentation:
- Updated ERROR_HANDLING_STRATEGY.md with complete implementation guide
- Updated ARCHITECTURE.md with new error handling patterns
- Added explicit extension control documentation and examples
- Documented GraphQL extension field control best practices
- Removed migration sections (no releases yet)
- Added comprehensive service and layer error pattern examples

Benefits:
- Eliminates manual Error trait implementations
- Prevents type compatibility issues in GraphQL extensions
- Provides explicit control over error data exposure
- Maintains rich diagnostic information for debugging
- Enables automatic error registry for tooling and introspection
- Follows "explicit is better than implicit" principle

This establishes the foundation for consistent, type-safe error handling
across the entire Apollo Router ecosystem with excellent developer experience. 
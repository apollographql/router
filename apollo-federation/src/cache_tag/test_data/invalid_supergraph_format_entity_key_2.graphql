schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.5", for: EXECUTION)
    @link(url: "https://specs.apollo.dev/cacheTag/v0.1", for: EXECUTION) {
    query: Query
    mutation: Mutation
}

directive @join__directive(
    graphs: [join__Graph!]
    name: String!
    args: join__DirectiveArguments
) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
    overrideLabel: String
    contextArguments: [join__ContextArgument!]
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
    graph: join__Graph!
    interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
    graph: join__Graph!
    member: String!
) repeatable on UNION

directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
) repeatable on SCHEMA

input join__ContextArgument {
    name: String!
    type: String!
    context: String!
    selection: join__FieldValue!
}

scalar join__DirectiveArguments

scalar join__FieldSet

scalar join__FieldValue

enum join__Graph {
    ACCOUNTS @join__graph(name: "accounts", url: "http://accounts")
    INVENTORY @join__graph(name: "inventory", url: "http://inventory")
    PRODUCTS @join__graph(name: "products", url: "http://products")
    REVIEWS @join__graph(name: "reviews", url: "http://reviews")
}

scalar link__Import

enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
}

type Mutation @join__type(graph: PRODUCTS) @join__type(graph: REVIEWS) {
    createProduct(upc: ID!, name: String): Product @join__field(graph: PRODUCTS)
    createReview(upc: ID!, id: ID!, body: String): Review
        @join__field(graph: REVIEWS)
}

type Product
    @join__type(graph: ACCOUNTS, key: "upc", extension: true)
    @join__type(graph: INVENTORY, key: "upc")
    @join__type(graph: PRODUCTS, key: "upc")
    @join__type(graph: PRODUCTS, key: "name")
    @join__type(graph: REVIEWS, key: "upc")
    @join__directive(
        graphs: [INVENTORY, PRODUCTS, REVIEWS]
        name: "federation__cacheTag"
        args: { format: "product" }
    )
    @join__directive(
        graphs: [INVENTORY, PRODUCTS, REVIEWS]
        name: "federation__cacheTag"
        args: { format: "product-{$key.upc}" }
    ) {
    upc: String!
    weight: Int
        @join__field(graph: INVENTORY, external: true)
        @join__field(graph: PRODUCTS)
    price: Int
        @join__field(graph: INVENTORY, external: true)
        @join__field(graph: PRODUCTS)
    inStock: Boolean @join__field(graph: INVENTORY)
    shippingEstimate: Int
        @join__field(graph: INVENTORY, requires: "price weight")
    name: String! @join__field(graph: PRODUCTS)
    reviews: [Review] @join__field(graph: REVIEWS)
    reviewsForAuthor(authorID: ID!): [Review] @join__field(graph: REVIEWS)
}

type Query
    @join__type(graph: ACCOUNTS)
    @join__type(graph: INVENTORY)
    @join__type(graph: PRODUCTS)
    @join__type(graph: REVIEWS) {
    me: User @join__field(graph: ACCOUNTS)
    recommendedProducts: [Product] @join__field(graph: ACCOUNTS)
    topProducts(first: Int = 5): [Product]
        @join__field(graph: PRODUCTS)
        @join__directive(
            graphs: [PRODUCTS]
            name: "federation__cacheTag"
            args: { format: "topProducts" }
        )
        @join__directive(
            graphs: [PRODUCTS]
            name: "federation__cacheTag"
            args: { format: "topProducts-{$args.first}" }
        )
}

type Review @join__type(graph: REVIEWS, key: "id") {
    id: ID!
    body: String
    author: User @join__field(graph: REVIEWS, provides: "username")
    product: Product
}

type Test @join__type(graph: REVIEWS) {
    a: String!
}

type User
    @join__type(graph: ACCOUNTS, key: "id")
    @join__type(graph: REVIEWS, key: "id") {
    id: ID!
    name: String @join__field(graph: ACCOUNTS)
    username: String
        @join__field(graph: ACCOUNTS)
        @join__field(graph: REVIEWS, external: true)
    reviews: [Review] @join__field(graph: REVIEWS)
}

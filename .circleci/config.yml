version: 2.1

# These "CircleCI Orbs" are reusable bits of configuration that can be shared
# across projects.  See https://circleci.com/orbs/ for more information.
orbs:
  # Rust steps which are used below (like `rust/install`, `rust/test`) are
  # defined in this orb. For reference, the orb can be found here:
  # https://github.com/CircleCI-Public/rust-orb
  rust: circleci/rust@1.6.0
  gh: circleci/github-cli@1.0.4

executors:
  rust_linux: &rust_linux_executor
    docker:
      - image: cimg/base:stable
    resource_class: medium+
  rust_macos: &rust_macos_executor
    macos:
      xcode: 11.4
  rust_windows: &rust_windows_executor
    machine:
      image: "windows-server-2019-vs2019:stable"
    resource_class: windows.xlarge
    shell: powershell.exe -ExecutionPolicy Bypass

jobs:
  build_test_lint:
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    environment:
      # Note: This is a no-op at the second, but bear with me on this.  If this
      # comment is not removed by 2021-06-30 remove it along with the next line.
      # renovate: datasource=github-tags depName=nodejs/node versioning=node
      NODE_VERSION: 14.17.5
      NPM_VERSION: 7.10.0
    steps:
      - checkout
      - run:
          name: Initialize submodules
          command: git submodule update --recursive --init
      - when:
          condition:
            equal: [*rust_macos_executor, << parameters.platform >>]
          steps:
            - run: echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $BASH_ENV
            - run: echo "export OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $BASH_ENV
            - run: test -e "$OPENSSL_ROOT_DIR"
            - run: brew install cmake
            - rust/install:
                version: stable
            - restore_cache:
                keys:
                  - rust-target-v1-macos-{{ checksum "Cargo.lock" }}
            # Installing this with the curl nvm command was proving difficult,
            # so I've opted to just install the .pkg.  Should be the same net
            # result, even if liked the opportunity for symmetry with Linux.
            - run:
                name: Installing Node.js with a .pkg.
                command: |
                  curl "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.pkg" > "$HOME/Downloads/node.pkg" && sudo installer -store -pkg "$HOME/Downloads/node.pkg" -target "/"
            - run:
                name: Install specific version of npm
                command: |
                  sudo npm install --global npm@${NPM_VERSION}
            - run:
                name: Assert Node.js version
                command: test "$(node --version)" = "v${NODE_VERSION}"
            - run:
                name: Assert npm version
                command: test "$(npm --version)" = "${NPM_VERSION}"
            - rust/build:
                # This is prefixed in the orb with 'cargo-'
                cache_version: v2-macos
                crate: --workspace --tests
            - save_cache:
                key: rust-target-v1-macos-{{ checksum "Cargo.lock" }}
                paths:
                  - target/
      - when:
          condition:
            equal: [*rust_linux_executor, << parameters.platform >>]
          steps:
            - run:
                name: Update and install dependencies
                command: |
                  sudo apt-get update
                  sudo apt-get install -y libssl-dev cmake
            - rust/install:
                version: stable
            - restore_cache:
                keys:
                  - rust-target-v1-linux-{{ checksum "Cargo.lock" }}
            - run:
                name: Install nvm
                command: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
            - run: echo '. ~/.nvm/nvm.sh' >> $BASH_ENV
            - run:
                name: Install desired Node.js version
                command: |
                  nvm install $NODE_VERSION
                  nvm alias default $NODE_VERSION
                  npm install --global npm@${NPM_VERSION}
            - run:
                name: Assert Node.js version
                command: test "$(node --version)" = "v${NODE_VERSION}"
            - run:
                name: Assert npm version
                command: test "$(npm --version)" = "${NPM_VERSION}"
            - rust/build:
                # This is prefixed in the orb with 'cargo-'
                cache_version: v2-linux
                crate: --workspace --tests
            - save_cache:
                key: rust-target-v1-linux-{{ checksum "Cargo.lock" }}
                paths:
                  - target/
      - when:
          condition:
            equal: [*rust_windows_executor, << parameters.platform >>]
          steps:
            #            - run:
            #                # TODO compiling grpcio on Windows is still not working
            #                #      using boringssl gives an error message
            #                #      using openssl hangs indefinitely
            #                name: Install grpcio build dependencies
            #                command: |
            #                  choco install activeperl -y
            #                  choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
            #                  choco install yasm -y
            #                  choco install openssl -y
            - run:
                name: Install rustup
                environment:
                  # Override auto-detection of RAM for Rustc install.
                  # https://github.com/rust-lang/rustup/issues/2229#issuecomment-585855925
                  RUSTUP_UNPACK_RAM: "21474836480"
                command: |
                  $installer_dir = "$Env:TEMP"
                  echo "Downloading rustup"
                  (New-Object System.Net.WebClient).DownloadFile("https://win.rustup.rs/x86_64", "$installer_dir\rustup-init.exe")
                  echo "Installing rustup"
                  & $installer_dir\rustup-init.exe --profile minimal --component rustfmt,clippy -y
                  exit $LASTEXITCODE
            - run:
                name: Special case for Windows because of ssh-agent
                command: |
                  Add-Content -path "${Env:USERPROFILE}\.cargo\config.toml" @"
                  [net]
                  git-fetch-with-cli = true
                  "@
            - restore_cache:
                keys:
                  - rust-target-v1-windows-{{ checksum "Cargo.lock" }}
            - run:
                name: Install desired Node.js version with nvm
                command: |
                  nvm install ${Env:NODE_VERSION}
                  nvm on
            - run:
                # https://github.com/coreybutler/nvm-windows/issues/300
                # Have to move the command out of the way because it can't
                # overwrite itself otherwise.   This is madness, but apparently
                # accepted.  Other things I tried: using yarn to install npm,
                # using http://npm.im/npm-windows-upgrade and even shouting.
                name: Install specific version of npm in a crazy Windows way
                command: |
                  $node_dir = (get-item (get-command npm).source).directory.fullname
                  foreach ($cmd in @("npm", "npx")) {
                    foreach ($ext in @(".ps1", ".cmd", "")) {
                      if (Test-Path "$node_dir/$cmd$ext") {
                        rename-item -path (join-path -path $node_dir -childpath "$cmd$ext") "${cmd}-orig${ext}"
                      }
                    }
                  }
                  npm-orig install --global "npm@${Env:NPM_VERSION}"
            - run:
                name: Assert Node.js version
                command: |
                  if ((node --version) -Ne "v${Env:NODE_VERSION}") { exit 1 }
            - run:
                name: Assert npm version
                command: |
                  if ((npm --version) -Ne "${Env:NPM_VERSION}") { exit 1 }
            - rust/build:
                # This is prefixed in the orb with 'cargo-'
                cache_version: v2-windows
                crate: --workspace --tests
            - save_cache:
                key: rust-target-v1-windows-{{ checksum "Cargo.lock" }}
                paths:
                  - target/
            # TODO: normally xtask can run the federation by itself and it
            #       works on GitHub Actions on Windows. Unfortunately it
            #       doesn't work here on CircleCI on Windows only.
            - run:
                name: npm clean-install
                working_directory: examples/nodejs/federation-demo
                command: npm clean-install
            - run:
                name: start federation-demo (background)
                working_directory: examples/nodejs/federation-demo
                command: npm start
                background: true
            - run:
                name: wait for federation demo to start
                command: npx wait-on tcp:4001 tcp:4002 tcp:4003 tcp:4004 tcp:4000

      - run:
          command: >
            cargo xtask test
      - run:
          command: >
            cargo xtask lint

  build_release:
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    environment:
      # Note: This is a no-op at the second, but bear with me on this.  If this
      # comment is not removed by 2021-06-30 remove it along with the next line.
      # renovate: datasource=github-tags depName=nodejs/node versioning=node
      NODE_VERSION: 14.17.5
      NPM_VERSION: 7.10.0
      RELEASE_BIN: router
      APPLE_TEAM_ID: "YQK948L752"
      APPLE_USERNAME: "opensource@apollographql.com"
      MACOS_PRIMARY_BUNDLE_ID: com.apollographql.router
    steps:
      - checkout
      - run:
          name: Initialize submodules
          command: git submodule update --recursive --init
      - when:
          condition:
            equal: [*rust_macos_executor, << parameters.platform >>]
          steps:
            - run: echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $BASH_ENV
            - run: echo "export OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $BASH_ENV
            - run: test -e "$OPENSSL_ROOT_DIR"
            - run: brew install cmake
            - rust/install:
                version: stable
            # Installing this with the curl nvm command was proving difficult,
            # so I've opted to just install the .pkg.  Should be the same net
            # result, even if liked the opportunity for symmetry with Linux.
            - run:
                name: Installing Node.js with a .pkg.
                command: |
                  curl "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.pkg" > "$HOME/Downloads/node.pkg" && sudo installer -store -pkg "$HOME/Downloads/node.pkg" -target "/"
            - run:
                name: Install specific version of npm
                command: |
                  sudo npm install --global npm@${NPM_VERSION}
            - run:
                name: Assert Node.js version
                command: test "$(node --version)" = "v${NODE_VERSION}"
            - run:
                name: Assert npm version
                command: test "$(npm --version)" = "${NPM_VERSION}"
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package
                  --apple-team-id ${APPLE_TEAM_ID}
                  --apple-username ${APPLE_USERNAME}
                  --cert-bundle-base64 ${MACOS_CERT_BUNDLE_BASE64}
                  --cert-bundle-password ${MACOS_CERT_BUNDLE_PASSWORD}
                  --keychain-password ${MACOS_KEYCHAIN_PASSWORD}
                  --notarization-password ${MACOS_NOTARIZATION_PASSWORD}
                  --primary-bundle-id ${MACOS_PRIMARY_BUNDLE_ID}
                  --output artifacts/
      - when:
          condition:
            equal: [*rust_linux_executor, << parameters.platform >>]
          steps:
            - run:
                name: Update and install dependencies
                command: |
                  sudo apt-get update
                  sudo apt-get install -y libssl-dev
            - rust/install:
                version: stable
            - run:
                name: Install nvm
                command: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
            - run: echo '. ~/.nvm/nvm.sh' >> $BASH_ENV
            - run:
                name: Install desired Node.js version
                command: |
                  nvm install $NODE_VERSION
                  nvm alias default $NODE_VERSION
                  npm install --global npm@${NPM_VERSION}
            - run:
                name: Assert Node.js version
                command: test "$(node --version)" = "v${NODE_VERSION}"
            - run:
                name: Assert npm version
                command: test "$(npm --version)" = "${NPM_VERSION}"
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package --output artifacts/
      - when:
          condition:
            equal: [*rust_windows_executor, << parameters.platform >>]
          steps:
            - run:
                name: Install rustup
                environment:
                  # Override auto-detection of RAM for Rustc install.
                  # https://github.com/rust-lang/rustup/issues/2229#issuecomment-585855925
                  RUSTUP_UNPACK_RAM: "21474836480"
                command: |
                  $installer_dir = "$Env:TEMP"
                  echo "Downloading rustup"
                  (New-Object System.Net.WebClient).DownloadFile("https://win.rustup.rs/x86_64", "$installer_dir\rustup-init.exe")
                  echo "Installing rustup"
                  & $installer_dir\rustup-init.exe --profile minimal --component rustfmt,clippy -y
                  exit $LASTEXITCODE
            - run:
                name: Special case for Windows because of ssh-agent
                command: |
                  Add-Content -path "${Env:USERPROFILE}\.cargo\config.toml" @"
                  [net]
                  git-fetch-with-cli = true
                  "@
            - run:
                name: Install desired Node.js version with nvm
                command: |
                  nvm install ${Env:NODE_VERSION}
                  nvm on
            - run:
                # https://github.com/coreybutler/nvm-windows/issues/300
                # Have to move the command out of the way because it can't
                # overwrite itself otherwise.   This is madness, but apparently
                # accepted.  Other things I tried: using yarn to install npm,
                # using http://npm.im/npm-windows-upgrade and even shouting.
                name: Install specific version of npm in a crazy Windows way
                command: |
                  $node_dir = (get-item (get-command npm).source).directory.fullname
                  foreach ($cmd in @("npm", "npx")) {
                    foreach ($ext in @(".ps1", ".cmd", "")) {
                      if (Test-Path "$node_dir/$cmd$ext") {
                        rename-item -path (join-path -path $node_dir -childpath "$cmd$ext") "${cmd}-orig${ext}"
                      }
                    }
                  }
                  npm-orig install --global "npm@${Env:NPM_VERSION}"
            - run:
                name: Assert Node.js version
                command: |
                  if ((node --version) -Ne "v${Env:NODE_VERSION}") { exit 1 }
            - run:
                name: Assert npm version
                command: |
                  if ((npm --version) -Ne "${Env:NPM_VERSION}") { exit 1 }
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package --output artifacts
      - persist_to_workspace:
          root: artifacts
          paths:
            - "*"

  publish_github_release:
    docker:
      - image: cimg/base:stable
    resource_class: small
    environment:
      VERSION: << pipeline.git.tag >>
    steps:
      - checkout
      - attach_workspace:
          at: artifacts
      - gh/setup
      - run:
          command: >
            cd artifacts && sha256sum *.tar.gz > sha256sums.txt
      - run:
          command: >
            cd artifacts && md5sum *.tar.gz > md5sums.txt
      - run:
          command: >
            cd artifacts && sha1sum *.tar.gz > sha1sums.txt
      - run:
          command: >
            gh release create $VERSION --notes-file CHANGELOG.md --title $VERSION artifacts/*

workflows:
  build:
    jobs:
      - build_test_lint:
          matrix:
            parameters:
              platform: [rust_macos, rust_windows, rust_linux]
  release:
    jobs:
      - build_release:
          matrix:
            parameters:
              platform: [rust_macos, rust_windows, rust_linux]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - publish_github_release:
          requires: [build_release]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/

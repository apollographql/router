version: 2.1

# These "CircleCI Orbs" are reusable bits of configuration that can be shared
# across projects.  See https://circleci.com/orbs/ for more information.
orbs:
  gh: circleci/github-cli@2.2.0
  slack: circleci/slack@4.12.5

executors:
  amd_linux_build: &amd_linux_build_executor
    docker:
      - image: cimg/base:stable
    resource_class: xlarge
    environment:
      CARGO_BUILD_JOBS: 4
      RUST_TEST_THREADS: 6
  amd_linux_helm: &amd_linux_helm_executor
    docker:
      - image: cimg/base:stable
    resource_class: small
  amd_linux_test: &amd_linux_test_executor
    docker:
      - image: cimg/base:stable
      - image: cimg/redis:7.2.0
      - image: jaegertracing/all-in-one:1.48.0
    resource_class: xlarge
    environment:
      CARGO_BUILD_JOBS: 4
      RUST_TEST_THREADS: 6
  arm_linux_build: &arm_linux_build_executor
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.large
    environment:
      CARGO_BUILD_JOBS: 8
      RUST_TEST_THREADS: 8
  arm_linux_test: &arm_linux_test_executor
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.xlarge
    environment:
      CARGO_BUILD_JOBS: 8
      RUST_TEST_THREADS: 8
  macos_build: &macos_build_executor
    macos:
      # See https://circleci.com/docs/xcode-policy along with the support matrix
      # at https://circleci.com/docs/using-macos#supported-xcode-versions.
      # We use the major.minor notation to bring in compatible patches.
      xcode: 13.4
    resource_class: macos.x86.medium.gen2
  macos_test: &macos_test_executor
    macos:
      # See https://circleci.com/docs/xcode-policy along with the support matrix
      # at https://circleci.com/docs/using-macos#supported-xcode-versions.
      # We use the major.minor notation to bring in compatible patches.
      xcode: 13.4
    resource_class: macos.x86.medium.gen2
  windows_build: &windows_build_executor
    machine:
      image: "windows-server-2019-vs2019:stable"
    resource_class: windows.xlarge
    shell: bash.exe --login -eo pipefail
  windows_test: &windows_test_executor
    machine:
      image: "windows-server-2019-vs2019:stable"
    resource_class: windows.xlarge
    shell: bash.exe --login -eo pipefail

# We don't use {{ arch }} because on windows it is unstable https://discuss.circleci.com/t/value-of-arch-unstable-on-windows/40079
parameters:
  toolchain_version:
    type: string
    default: '{{ checksum ".circleci/config.yml" }}-v2-{{ checksum "~/.arch" }}-{{ checksum "rust-toolchain.toml" }}-{{ checksum "~/.daily_version" }}'
  xtask_version:
    type: string
    default: '{{ checksum ".circleci/config.yml" }}-{{ checksum "~/.arch" }}-{{ checksum "rust-toolchain.toml" }}-{{ checksum "~/.xtask_version" }}'
  merge_version:
    type: string
    default: '{{ checksum ".circleci/config.yml" }}-{{ checksum "~/.arch" }}-{{ checksum "rust-toolchain.toml" }}-{{ checksum "~/.xtask_version" }}-{{ checksum "~/.merge_version" }}'
  protoc_version:
    type: string
    default: "21.8"
  nightly:
    type: boolean
    default: false

# These are common environment variables that we want to set on on all jobs.
# While these could conceivably be set on the CircleCI project settings'
# as "Secrets", these are not really secrets, and its convenient to keep them in
# code.  Also, most of our secrets are not necessary for _most_ of our jobs, so this enables
# forks of the project to run their own tests on their own CircleCI deployments with no
# additional configuration.
common_job_environment: &common_job_environment
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  RUST_BACKTRACE: full
  CARGO_INCREMENTAL: 0
commands:

  setup_environment:
    parameters:
      platform:
        type: executor
    steps:
      - unify_environment:
          platform: << parameters.platform >>
      - create_cache_keys
      - restore_cache:
          keys:
            - "<< pipeline.parameters.toolchain_version >>"
      - install_packages:
          platform: << parameters.platform >>
      - install_protoc:
          platform: << parameters.platform >>
      - install_rust:
          platform: << parameters.platform >>
      - install_extra_tools
      - fetch_dependencies
      - save_cache:
          key: "<< pipeline.parameters.toolchain_version >>"
          paths:
            - ~/.deb
            - ~/.cargo
            - ~/.rustup
            - ~/.local
      - install_xtask

  # Even though all executors use bash there are a number of differences that can be taken care of up front.
  # Windows shell commands are found on the path before the linux subsystem commands, so use aliases to override.
  # OSX doesn't seem to support aliases properly, so we use a symlink
  unify_environment:
    parameters:
      platform:
        type: executor
    steps:
      - run:
          name: Setup path
          command: echo 'export PATH="$HOME/.local/bin:$HOME/.local/aliases:$PATH"' >> "$BASH_ENV"
      - when:
          condition:
            or:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
              - equal: [ *amd_linux_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Write arch
                command: |
                  echo 'amd_linux' >> ~/.arch
      - when:
          condition:
            or:
              - equal: [ *arm_linux_build_executor, << parameters.platform >> ]
              - equal: [ *arm_linux_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Write arch
                command: |
                  echo 'arm_linux' >> ~/.arch
      - when:
          condition:
            or:
              - equal: [ *macos_build_executor, << parameters.platform >> ]
              - equal: [ *macos_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Make link to md5
                command: |
                  mkdir -p ~/.local/aliases
                  ln -s /sbin/md5 ~/.local/aliases/md5sum
            - run:
                name: Write arch
                command: |
                  echo 'osx' >> ~/.arch
      - when:
          condition:
            or:
              - equal: [ *windows_build_executor, << parameters.platform >> ]
              - equal: [ *windows_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Create bash aliases
                command: |
                  echo 'alias find=/bin/find' >> "$BASH_ENV"
                  echo 'alias sort=/bin/sort' >> "$BASH_ENV"
                  echo 'export EXECUTABLE_SUFFIX=".exe"' >> "$BASH_ENV"
            - run:
                name: Write arch
                command: |
                  echo 'windows' >> ~/.arch

  # Create files that are useful for cache keys
  create_cache_keys:
    steps:
      - run:
          name: Create cache keys
          command: |
            # The Rust index takes time to download. Update this daily.
            date +%j > ~/.daily_version
            # The checksum of the xtask/src directory, so that when we make changes to xtask we cause a full rebuild
            find xtask/src -type f | while read name; do md5sum $name; done | sort -k 2 | md5sum > ~/.xtask_version
            # The closest common ancestor to the default branch, so that test jobs can take advantage previous compiles
            git remote set-head origin -a
            TARGET_BRANCH=$(git rev-parse --abbrev-ref origin/HEAD)    
            echo "Target branch is ${TARGET_BRANCH}"
            COMMON_ANCESTOR_REF=$(git merge-base HEAD "${TARGET_BRANCH}")
            echo "Common ancestor is ${COMMON_ANCESTOR_REF}"
            echo "${CIRCLE_PROJECT_REPONAME}-${COMMON_ANCESTOR_REF}" > ~/.merge_version

  # Linux specific step to install packages that are needed
  install_packages:
    parameters:
      platform:
        type: executor
    steps:
      - when:
          condition:
            or:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
              - equal: [ *amd_linux_test_executor, << parameters.platform >> ]
              - equal: [ *arm_linux_build_executor, << parameters.platform >> ]
              - equal: [ *arm_linux_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Update and install dependencies
                command: |
                  if [[ ! -d "$HOME/.deb" ]]; then
                    mkdir $HOME/.deb
                    sudo apt-get --download-only -o Dir::Cache="$HOME/.deb" -o Dir::Cache::archives="$HOME/.deb" install libssl-dev libdw-dev cmake
                  fi
                  sudo dpkg -i $HOME/.deb/*.deb
      - when:
          condition:
            or:
              - equal: [ *windows_build_executor, << parameters.platform >> ]
              - equal: [ *windows_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install CMake
                command: |
                  choco install cmake -y
                  echo 'export PATH="/c/Program Files/CMake/bin:$PATH"' >> "$BASH_ENV"
                  exit $LASTEXITCODE
      - when:
          condition:
            or:
              - equal: [ *macos_build_executor, << parameters.platform >> ]
              - equal: [ *macos_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install CMake
                command: |
                  brew install cmake
  install_protoc:
    parameters:
      platform:
        type: executor
    steps:
      - when:
          condition:
            or:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
              - equal: [ *amd_linux_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install protoc
                command: |
                  if [[ ! -f "$HOME/.local/bin/protoc" ]]; then
                    curl -L https://github.com/protocolbuffers/protobuf/releases/download/v<< pipeline.parameters.protoc_version >>/protoc-<< pipeline.parameters.protoc_version >>-linux-x86_64.zip --output protoc.zip
                    unzip protoc.zip -d $HOME/.local
                  fi
      - when:
          condition:
            or:
              - equal: [ *arm_linux_build_executor, << parameters.platform >> ]
              - equal: [ *arm_linux_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install protoc
                command: |
                  if [[ ! -f "$HOME/.local/bin/protoc" ]]; then
                    curl -L https://github.com/protocolbuffers/protobuf/releases/download/v<< pipeline.parameters.protoc_version >>/protoc-<< pipeline.parameters.protoc_version >>-linux-aarch_64.zip --output protoc.zip
                    unzip protoc.zip -d $HOME/.local
                  fi
      - when:
          condition:
            or:
              - equal: [ *macos_build_executor, << parameters.platform >> ]
              - equal: [ *macos_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install protoc
                command: |
                  if [[ ! -f "$HOME/.local/bin/protoc" ]]; then
                    curl -L https://github.com/protocolbuffers/protobuf/releases/download/v<< pipeline.parameters.protoc_version >>/protoc-<< pipeline.parameters.protoc_version >>-osx-universal_binary.zip --output protoc.zip
                    unzip protoc.zip -d $HOME/.local
                  fi
      - when:
          condition:
            or:
              - equal: [ *windows_build_executor, << parameters.platform >> ]
              - equal: [ *windows_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install protoc
                command: |
                  if [[ ! -f "$HOME/.local/bin/protoc$EXECUTABLE_SUFFIX" ]]; then
                    curl -L https://github.com/protocolbuffers/protobuf/releases/download/v<< pipeline.parameters.protoc_version >>/protoc-<< pipeline.parameters.protoc_version >>-win64.zip --output protoc.zip
                    unzip protoc.zip -d $HOME/.local
                  fi

  install_rust:
    parameters:
      platform:
        type: executor
    steps:
      - run:
          name: Install Rust
          command: |
            if [[ ! -d "$HOME/.cargo" ]]; then
              curl https://sh.rustup.rs -sSf -o rustup.sh
              chmod 755 ./rustup.sh
              ./rustup.sh -y --profile minimal --component clippy --component rustfmt
            fi
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$BASH_ENV"

      - when:
          condition:
            or:
              - equal: [ *windows_build_executor, << parameters.platform >> ]
              - equal: [ *windows_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Special case for Windows because of ssh-agent
                command: |
                  printf "[net]\ngit-fetch-with-cli = true" >> ~/.cargo/Cargo.toml

  install_extra_tools:
    steps:
      - run:
          name: Install cargo deny, about, edit
          command: |
            if [[ ! -f "$HOME/.cargo/bin/cargo-deny$EXECUTABLE_SUFFIX" ]]; then
              cargo install --locked cargo-deny cargo-about cargo-edit
            fi

  fetch_dependencies:
    steps:
      - run:
          name: Fetch dependencies
          command: cargo fetch --locked
  install_xtask:
    steps:
      - restore_cache:
          keys:
            - "<< pipeline.parameters.xtask_version >>"
      - run:
          name: Install xtask
          command: |
            if [[ ! -f "$HOME/.cargo/bin/xtask$EXECUTABLE_SUFFIX" ]]; then
              cargo install --locked --path xtask
            fi
      - save_cache:
          key: "<< pipeline.parameters.xtask_version >>"
          paths:
            - ~/.cargo/bin/xtask
            - ~/.cargo/bin/xtask.exe

  xtask_lint:
    steps:
      - restore_cache:
          keys:
            - "<< pipeline.parameters.merge_version >>-lint"
      - run: xtask lint
      - when:
          condition:
            equal: [ "dev", "<< pipeline.git.branch >>" ]
          steps:
            - save_cache:
                key: "<< pipeline.parameters.merge_version >>-lint"
                paths:
                  - target
  xtask_release_preverify:
    steps:
      - run: xtask release pre-verify

  xtask_check_helm:
    steps:
      - run:
          name: Validate helm manifests
          command: |
            # Install Helm
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

            # Install kubeconform
            KUBECONFORM_INSTALL=$(mktemp -d)
            curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz -C "${KUBECONFORM_INSTALL}"

            # Create list of kube versions
            CURRENT_KUBE_VERSIONS=$(curl -L https://raw.githubusercontent.com/kubernetes/website/main/data/releases/schedule.yaml \
              | yq -o json '.' \
              | jq --raw-output '.schedules[] | select((now | strftime("%Y-%m-%dT00:00:00Z")) as $date | .releaseDate < $date and .endOfLifeDate > $date) | .previousPatches[0].release')

            # Use helm to template our chart against all kube versions
            TEMPLATE_DIR=$(mktemp -d)
            for kube_version in ${CURRENT_KUBE_VERSIONS}; do
              # Use helm to template our chart against kube_version
              helm template --kube-version "${kube_version}" router helm/chart/router --set autoscaling.enabled=true > "${TEMPLATE_DIR}/router-${kube_version}.yaml"

              # Execute kubeconform on our templated charts to ensure they are good
              "${KUBECONFORM_INSTALL}/kubeconform" \
                --kubernetes-version "${kube_version}" \
                --strict \
                --schema-location default \
                --verbose \
                "${TEMPLATE_DIR}/router-${kube_version}.yaml"
            done

  xtask_check_compliance:
    steps:
      - restore_cache:
          keys:
            - "<< pipeline.parameters.merge_version >>-compliance"
      # cargo-deny fetches a rustsec advisory DB, which has to happen on github.com over https
      - run: git config --global --unset-all url.ssh://git@github.com.insteadof
      - run: xtask check-compliance
      - when:
          condition:
            equal: [ "dev", "<< pipeline.git.branch >>" ]
          steps:
            - save_cache:
                key: "<< pipeline.parameters.merge_version >>-compliance"
                paths:
                  - target
  xtask_test:
    parameters:
      variant:
        type: string
        default: "default"
    steps:
      - restore_cache:
          keys:
            - "<< pipeline.parameters.merge_version >>-test-<< parameters.variant >>"
      - run:
          name: Run tests
          command: xtask test --workspace --locked
      - run:
          name: Delete large files from cache
          command: |
            find target/debug/deps -type f -size +50M -delete
            rm target/debug/router*
      - when:
          condition:
            equal: [ "dev", "<< pipeline.git.branch >>" ]
          steps:
          - save_cache:
              key: "<< pipeline.parameters.merge_version >>-test-<< parameters.variant >>"
              paths:
                - target
jobs:
  lint:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - xtask_lint

  check_helm:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - when:
          condition:
            equal: [*amd_linux_helm_executor, << parameters.platform >>]
          steps:
            - checkout
            - xtask_check_helm

  check_compliance:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - xtask_check_compliance

  test:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - xtask_test

  test_updated:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - run:
          name: Update all Rust dependencies
          command: |
            rm Cargo.lock
            cargo fetch
      - xtask_test:
          variant: "updated"
  pre_verify_release:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - xtask_release_preverify

  build_release:
    parameters:
      platform:
        type: executor
      nightly:
        type: boolean
        default: false
    executor: << parameters.platform >>
    environment:
      <<: *common_job_environment
      RELEASE_BIN: router
      APPLE_TEAM_ID: "YQK948L752"
      APPLE_USERNAME: "opensource@apollographql.com"
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - when:
          condition:
            equal: [ *macos_build_executor, << parameters.platform >> ]
          steps:
            - when:
                condition:
                  equal: [ true, << parameters.nightly >> ]
                steps:
                  - run: cargo xtask release prepare nightly
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package
                  --apple-team-id ${APPLE_TEAM_ID}
                  --apple-username ${APPLE_USERNAME}
                  --cert-bundle-base64 ${MACOS_CERT_BUNDLE_BASE64}
                  --cert-bundle-password ${MACOS_CERT_BUNDLE_PASSWORD}
                  --keychain-password ${MACOS_KEYCHAIN_PASSWORD}
                  --notarization-password ${MACOS_NOTARIZATION_PASSWORD}
                  --output artifacts/
      - when:
          condition:
            and:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
              - equal: [ true, << parameters.nightly >> ]
          steps:
            - run:
                name: Helm install
                command: |
                  # Install Helm
                  curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            - run:
                name: helm-docs install
                command: |
                  # install golang (to ${HOME}/go)
                  curl -OLs https://go.dev/dl/go1.21.3.linux-amd64.tar.gz
                  tar -C "${HOME}" -xf go1.21.3.linux-amd64.tar.gz
                  # install helm-docs
                  PATH="${HOME}/go/bin" GOPATH="${HOME}/.local" GO111MODULE=on go install github.com/norwoodj/helm-docs/cmd/helm-docs@latest
      - when:
          condition:
            or:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
              - equal: [ *arm_linux_build_executor, << parameters.platform >> ]
              - equal: [ *windows_build_executor, << parameters.platform >> ]
          steps:
            # This will set the version to include current date and commit hash
            - when:
                condition:
                  equal: [ true, << parameters.nightly >> ]
                steps:
                  - run: cargo xtask release prepare nightly
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package --output artifacts/
      - persist_to_workspace:
          root: artifacts
          paths:
            - "*"
      - store_artifacts:
          path: artifacts/
      - when:
          condition:
            and:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
              - equal: [ true, << parameters.nightly >> ]
          steps:
            - setup_remote_docker:
                version: 20.10.11
                docker_layer_caching: true
            - run:
                name: Docker build
                command: |
                  BASE_VERSION=$(cargo metadata --format-version=1 --no-deps | jq --raw-output '.packages[0].version')
                  ARTIFACT_URL="https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/0/artifacts/router-v${BASE_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
                  VERSION="v$(echo "${BASE_VERSION}" | tr "+" "-")"
                  ROUTER_TAG=ghcr.io/apollographql/nightly/router
                  # Create a multi-arch builder which works properly under qemu
                  docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
                  docker context create buildx-build
                  docker buildx create --driver docker-container --use buildx-build
                  docker buildx inspect --bootstrap
                  # Note: GH Token owned by apollo-bot2, no expire
                  echo ${GITHUB_OCI_TOKEN} | docker login ghcr.io -u apollo-bot2 --password-stdin
                  # TODO: Can't figure out how to build multi-arch image from ARTIFACT_URL right now. Figure out later...
                  # Build and push debug image
                  docker buildx build --platform linux/amd64 --push --build-arg ARTIFACT_URL="${ARTIFACT_URL}" --build-arg DEBUG_IMAGE="true" --build-arg ROUTER_RELEASE=${VERSION} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION}-debug .
                  # Build and push release image
                  docker buildx build --platform linux/amd64 --push --build-arg ARTIFACT_URL="${ARTIFACT_URL}" --build-arg ROUTER_RELEASE=${VERSION} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION} .
            - run:
                name: Helm build
                command: |
                  # Package up the helm chart
                  helm package helm/chart/router
                  # Make sure we have the newest chart
                  CHART=$(ls -t router*.tgz| head -1)
                  # Note: GH Token owned by apollo-bot2, no expire
                  echo ${GITHUB_OCI_TOKEN} | helm registry login -u apollo-bot2 --password-stdin ghcr.io
                  # Push chart to repository
                  helm push ${CHART} oci://ghcr.io/apollographql/helm-charts-nightly
      - when:
          condition:
            equal: [ true, << parameters.nightly >> ]
          steps:
            - slack/notify:
                event: fail
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": ":x: A `nightly` release run has **failed** for `${CIRCLE_JOB}` on `${CIRCLE_PROJECT_REPONAME}`'s `${CIRCLE_BRANCH}`!"
                        }
                      },
                      {
                        "type": "actions",
                        "elements": [
                          {
                            "type": "button",
                            "action_id": "success_tagged_deploy_view",
                            "text": {
                              "type": "plain_text",
                              "text": "View Job"
                            },
                            "url": "${CIRCLE_BUILD_URL}"
                          }
                        ]
                      }
                    ]
                  }
            - slack/notify:
                event: pass
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": ":white_check_mark: A `nightly` build has completed for `${CIRCLE_JOB}` on `${CIRCLE_PROJECT_REPONAME}`'s `${CIRCLE_BRANCH}`."
                        }
                      },
                      {
                        "type": "actions",
                        "elements": [
                          {
                            "type": "button",
                            "action_id": "success_tagged_deploy_view",
                            "text": {
                              "type": "plain_text",
                              "text": "View Job"
                            },
                            "url": "${CIRCLE_BUILD_URL}"
                          }
                        ]
                      }
                    ]
                  }

  publish_github_release:
    docker:
      - image: cimg/base:stable
    resource_class: small
    environment:
      <<: *common_job_environment
      VERSION: << pipeline.git.tag >>
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - attach_workspace:
          at: artifacts
      - gh/setup
      - run:
          command: >
            cd artifacts && sha256sum *.tar.gz > sha256sums.txt
      - run:
          command: >
            cd artifacts && md5sum *.tar.gz > md5sums.txt
      - run:
          command: >
            cd artifacts && sha1sum *.tar.gz > sha1sums.txt
      - run:
          name: Create GitHub Release
          command: >
            case "$VERSION" in

              # If the VERSION contains a dash, consider it a pre-release version.
              # This is in-line with SemVer's expectations/designations!
              *-*) gh release create $VERSION --prerelease --notes-file /dev/null --title $VERSION artifacts/* ;;

              # In all other cases, publish it as the latest version.
              *) gh release create $VERSION --notes-file /dev/null --title $VERSION artifacts/* ;;

            esac
      - run:
          name: Docker build
          command: |
            ROUTER_TAG=ghcr.io/apollographql/router
            # Create a multi-arch builder which works properly under qemu
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker context create buildx-build
            docker buildx create --driver docker-container --use buildx-build
            docker buildx inspect --bootstrap
            # Note: GH Token owned by apollo-bot2, no expire
            echo ${GITHUB_OCI_TOKEN} | docker login ghcr.io -u apollo-bot2 --password-stdin
            # To prevent overwrite, check to see if our images already exists
            # If the manifest command succeeds, the images already exist
            docker manifest inspect ${ROUTER_TAG}:${VERSION}  > /dev/null && exit 1
            docker manifest inspect ${ROUTER_TAG}:${VERSION}-debug  > /dev/null && exit 1
            # Build and push debug image
            docker buildx build --platform linux/amd64,linux/arm64 --push --build-arg DEBUG_IMAGE="true" --build-arg ROUTER_RELEASE=${VERSION} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION}-debug .
            # Build and push release image
            docker buildx build --platform linux/amd64,linux/arm64 --push --build-arg ROUTER_RELEASE=${VERSION} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION} .
      - run:
          name: Helm build
          command: |
            # Install Helm
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            # Package up the helm chart
            helm package helm/chart/router
            # Make sure we have the newest chart
            CHART=$(ls -t router*.tgz| head -1)
            # Note: GH Token owned by apollo-bot2, no expire
            echo ${GITHUB_OCI_TOKEN} | helm registry login -u apollo-bot2 --password-stdin ghcr.io
            # To prevent overwrite, check to see if our chart already exists
            # If the show all command succeeds, the chart already exists
            VERSION=$(basename ${CHART} .tgz)
            helm show all oci://ghcr.io/apollographql/helm-charts/router --version ${VERSION} > /dev/null && exit 1
            # Push chart to repository
            helm push ${CHART} oci://ghcr.io/apollographql/helm-charts

workflows:
  ci_checks:
    when:
      not: << pipeline.parameters.nightly >>
    jobs:
      - lint:
          matrix:
            parameters:
              platform: [ amd_linux_build ]
      - check_helm:
          matrix:
            parameters:
              platform: [ amd_linux_helm ]
      - check_compliance:
          matrix:
            parameters:
              platform: [ amd_linux_build ]

      - test_updated:
          requires:
            - lint
            - check_helm
            - check_compliance
          matrix:
            parameters:
              platform:
                [ amd_linux_test ]
      - test:
          requires:
            - lint
            - check_helm
            - check_compliance
          matrix:
            parameters:
              platform:
                [ macos_test, windows_test, amd_linux_test, arm_linux_test ]

  nightly:
    when: << pipeline.parameters.nightly >>
    jobs:
      - lint:
          matrix:
            parameters:
              platform: [ amd_linux_build ]
      - check_helm:
          matrix:
            parameters:
              platform: [ amd_linux_helm ]
      - check_compliance:
          matrix:
            parameters:
              platform: [ amd_linux_build ]

      - test_updated:
          requires:
            - lint
            - check_helm
            - check_compliance
          matrix:
            parameters:
              platform:
                [ amd_linux_test ]
      - test:
          requires:
            - lint
            - check_helm
            - check_compliance
          matrix:
            parameters:
              platform:
                [ macos_test, windows_test, amd_linux_test, arm_linux_test ]
      - build_release:
          requires:
            - test
            - test_updated
          nightly: true
          context: router
          matrix:
            parameters:
              platform:
                [ macos_build, windows_build, amd_linux_build, arm_linux_build ]

  release:
    when:
      not: << pipeline.parameters.nightly >>
    jobs:
      - pre_verify_release:
          matrix:
            parameters:
              platform: [ amd_linux_build ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - lint:
          matrix:
            parameters:
              platform: [ amd_linux_build ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - check_helm:
          matrix:
            parameters:
              platform: [ amd_linux_helm ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - check_compliance:
          matrix:
            parameters:
              platform: [ amd_linux_build ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - test_updated:
          requires:
            - lint
            - check_helm
            - check_compliance
          matrix:
            parameters:
              platform:
                [ amd_linux_test ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - test:
          requires:
            - lint
            - check_helm
            - check_compliance
          matrix:
            parameters:
              platform:
                [ macos_test, windows_test, amd_linux_test, arm_linux_test ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - build_release:
          requires:
            - pre_verify_release
            - test
            - test_updated
          matrix:
            parameters:
              platform:
                [ macos_build, windows_build, amd_linux_build, arm_linux_build ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - publish_github_release:
          requires: [ build_release ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/

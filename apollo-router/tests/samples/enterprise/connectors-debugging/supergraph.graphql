schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.5", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/connect/v0.1", for: EXECUTION)
  @join__directive(
    graphs: [CONNECTORS]
    name: "link"
    args: { url: "https://specs.apollo.dev/connect/v0.1", import: ["@connect", "@source"] }
  )
  @join__directive(
    graphs: [CONNECTORS]
    name: "source"
    args: {
      name: "jsonPlaceholder"
      http: {
        baseURL: "https://jsonplaceholder.typicode.com/"
        headers: [{ name: "x-from", from: "x-test-from" }, { name: "x-invalid-from-source", value: "{$context.abcd}" }]
        queryParams: "invalidFromSource: $config.abcd"
      }
      errors: { message: "$context.aaaaa", extensions: "fromSource: $config.aaaaa" }
    }
  ) {
  query: Query
}

directive @join__directive(
  graphs: [join__Graph!]
  name: String!
  args: join__DirectiveArguments
) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
  overrideLabel: String
  contextArguments: [join__ContextArgument!]
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

input join__ContextArgument {
  name: String!
  type: String!
  context: String!
  selection: join__FieldValue!
}

scalar join__DirectiveArguments

scalar join__FieldSet

scalar join__FieldValue

enum join__Graph {
  CONNECTORS @join__graph(name: "connectors", url: "http://none")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Post @join__type(graph: CONNECTORS) {
  id: ID!
  body: String
  title: String
  author: User
}

type Query @join__type(graph: CONNECTORS) {
  posts: [Post]
    @join__directive(
      graphs: [CONNECTORS]
      name: "connect"
      args: { source: "jsonPlaceholder", http: { GET: "/posts" }, selection: "id title body author: { id: userId }" }
    )
  post(id: ID!): Post
    @join__directive(
      graphs: [CONNECTORS]
      name: "connect"
      args: {
        source: "jsonPlaceholder"
        http: {
          GET: "/posts/{$args.id}?invalidInConnectUri={$config.aaa}"
          headers: [{ name: "x-invalid-from-connect", value: "{$config.aaa}" }]
          queryParams: "invalidFromConnect: $config.abcdef"
        }
        selection: "id title: postTitle body author: { id: userId }"
        entity: true
      }
    )
  user(id: ID!): User
    @join__directive(
      graphs: [CONNECTORS]
      name: "connect"
      args: {
        source: "jsonPlaceholder"
        http: { GET: "/users/{$args.id}" }
        selection: "id name username"
        entity: true
      }
    )
  broken: [Post]
    @join__directive(
      graphs: [CONNECTORS]
      name: "connect"
      args: {
        source: "jsonPlaceholder"
        http: { GET: "/broken" }
        selection: "id title body author: { id: userId }"
        errors: { message: "$config.bbbbb", extensions: "fromSource: $context.bbbbb code: errorCode" }
      }
    )
}

type User @join__type(graph: CONNECTORS) {
  id: ID!
  name: String
  username: String
  posts: [Post]
    @join__directive(
      graphs: [CONNECTORS]
      name: "connect"
      args: { source: "jsonPlaceholder", http: { GET: "/users/{$this.id}/posts" }, selection: "id title body" }
    )
}

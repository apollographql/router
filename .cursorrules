We are working in the apollo-router-core, apollo-router-error-derive and pollo-router-error directories only for now. Ignore all other directories
Use hexagonal architecture to allow testing and to not expose client details to callers.
Traits and interfaces should generally be in a mod.rs and then implementations should be in sub modules. Submodules should be in their own directories because they will require a test.rs.
Always separate tests and test helpers out into a separate tests.rs file that are adjacent to a mod.rs
Traits should not expose client types. Instead create a new type and implement From.
Traits should avoid exposing nested traits in return types, the only exception is to return Self.
Mocking should be avoided if possible but if it must be used to make code testable then mry should be used NOT mockall.
Traits should be annotated with `#[cfg_attr(test, mry::mry)]`.
When you need to write tests that are applicable to multiple implementations make sure to have a reference implementation and use build.rs to duplicate it for the other implementations. This way it's easy for the tests to be run in an IDE. Remember that tests will be generated to the target directory, so don't forget to examine generated sourcode when correcting errors.
Make sure to use the bon library for builders
When diagnosing test failures run them one at a time
To create octocrab model types for fake requests/responses use serde to hydrate json
Never declare top level lifetimes in a trait only on individual functions.
Always externalize test fixtures, use include_str! to bring them in. Use yaml where possible.
Each trait should have an Error enum in the same mod.rs.
Never make errors Clone
Don't make too many code changes without making the code compile, break up refactorings into small chunks.
Check the crates directory to make sure you are not implementing a new crate that already exists
When adding a crate make sure to use the latest version from the internet also check to see if the workspace dependency is already specified.
Use rust edition = "2024"
Do not create tests that only exercise mocks of traits. There is no benefit to this.
IMPORTANT: Whenever you create a tests.rs in the related mod.rs file use:
```rust
#[cfg(test)]
mod tests
```
Do not use `mod test { }` from within a test.rs file.
Keep functions small, single purpose and testable.
Remember to use the request and response types from the services mod when creating services that do something, e.g. request response transformation. However for http request and response types remember to construct them you have to use http::Request::builder() or http::Response::builder(), you can't use the type aliases in our service.
Tower services should always have an error type, but they will always use an associated type of BoxError so that upstream errors can be propagated.
Always make sure linter errors pass before moving onto the next task.
Whenever you are instructed to so something plan how to achieve it in a number of easy to review steps making sure that you do a git commit between each step. Make sure to use conventional commit names.


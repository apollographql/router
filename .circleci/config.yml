version: 2.1

# These "CircleCI Orbs" are reusable bits of configuration that can be shared
# across projects.  See https://circleci.com/orbs/ for more information.
orbs:
  # Rust steps which are used below (like `rust/install`, `rust/test`) are
  # defined in this orb. For reference, the orb can be found here:
  # https://github.com/CircleCI-Public/rust-orb
  rust: circleci/rust@1.6.0
  gh: circleci/github-cli@2.1.0

executors:
  rust_linux: &rust_linux_executor
    docker:
      - image: cimg/base:stable
    resource_class: large
  rust_macos: &rust_macos_executor
    macos:
      xcode: 11.4
  rust_windows: &rust_windows_executor
    machine:
      image: "windows-server-2019-vs2019:stable"
    resource_class: windows.xlarge
    shell: powershell.exe -ExecutionPolicy Bypass

parameters:
  cache_version:
    type: string
    # increment that one to invalidate all the caches
    default: v7.{{ checksum "rust-toolchain.toml" }}

# These are common environment variables that we want to set on on all jobs.
# While these could conceivably be set on the CircleCI project settings'
# as "Secrets", these are not really secrets, and its convenient to keep them in
# code.  Also, most of our secrets are not necessary for _most_ of our jobs, so this enables
# forks of the project to run their own tests on their own CircleCI deployments with no
# additional configuration.
common_job_environment: &common_job_environment
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  RUST_BACKTRACE: full
  NODE_VERSION: 14.17.5
  NPM_VERSION: 7.10.0

commands:
  linux_install_baseline:
    steps:
      - run:
          name: Update and install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libssl-dev cmake
      - run:
          name: Download jaeger
          command: |
            curl -L https://github.com/jaegertracing/jaeger/releases/download/v1.33.0/jaeger-1.33.0-linux-amd64.tar.gz --output jaeger.tar.gz
            tar -xf jaeger.tar.gz
            mv jaeger-1.33.0-linux-amd64 jaeger
  macos_install_baseline:
    steps:
      - run: echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $BASH_ENV
      - run: echo "export OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $BASH_ENV
      - run: test -e "$OPENSSL_ROOT_DIR"
      - run: brew install cmake
      - run:
          name: Download jaeger
          command: |
            curl -L https://github.com/jaegertracing/jaeger/releases/download/v1.33.0/jaeger-1.33.0-darwin-amd64.tar.gz --output jaeger.tar.gz
            tar -xf jaeger.tar.gz
            mv jaeger-1.33.0-darwin-amd64 jaeger
  windows_install_baseline:
    steps:
      - run:
          name: Download jaeger
          shell: bash.exe
          command: |
            curl -L https://github.com/jaegertracing/jaeger/releases/download/v1.33.0/jaeger-1.33.0-windows-amd64.tar.gz --output jaeger.tar.gz
            tar -xf jaeger.tar.gz
            mv jaeger-1.33.0-windows-amd64 jaeger

  # This job sets up our nodejs dependencies,
  # and makes sure everything is ready to run integration tests
  macos_prepare_node_env:
    steps:
      #TODO[igni]: check for node version before we try to install it
      # Installing this with the curl nvm command was proving difficult,
      # so I've opted to just install the .pkg.  Should be the same net
      # result, even if liked the opportunity for symmetry with Linux.
      - run:
          name: Installing Node.js with a .pkg.
          command: |
            curl "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.pkg" > "$HOME/Downloads/node.pkg" && sudo installer -store -pkg "$HOME/Downloads/node.pkg" -target "/"
            sudo npm install --global npm@${NPM_VERSION}
      - run:
          name: Assert Node.js version
          command: test "$(node --version)" = "v${NODE_VERSION}"
      - run:
          name: Assert npm version
          command: test "$(npm --version)" = "${NPM_VERSION}"
      - run:
          # The jaeger exporter won't work without this
          name: Increase udp packet size
          command: |
            sudo sysctl net.inet.udp.maxdgram=65536
            sudo sysctl net.inet.udp.maxdgram
  linux_prepare_node_env:
    steps:
      #TODO[igni]: check for node version before we try to install it
      - run:
          name: Install nvm
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
            echo '. ~/.nvm/nvm.sh' >> $BASH_ENV
      - run:
          name: Install desired Node.js version
          command: |
            nvm install $NODE_VERSION
            nvm alias default $NODE_VERSION
            npm install --global npm@${NPM_VERSION}
      - run:
          name: Assert Node.js version
          command: test "$(node --version)" = "v${NODE_VERSION}"
      - run:
          name: Assert npm version
          command: test "$(npm --version)" = "${NPM_VERSION}"

  windows_prepare_node_env:
    #TODO[igni]: check for node version before we try to install it
    steps:
      - run:
          name: Install desired Node.js version with nvm
          command: |
            nvm install ${Env:NODE_VERSION}
            nvm on
      - run:
          # https://github.com/coreybutler/nvm-windows/issues/300
          # Have to move the command out of the way because it can't
          # overwrite itself otherwise.   This is madness, but apparently
          # accepted.  Other things I tried: using yarn to install npm,
          # using http://npm.im/npm-windows-upgrade and even shouting.
          name: Install specific version of npm in a crazy Windows way
          command: |
            $node_dir = (get-item (get-command npm).source).directory.fullname
            foreach ($cmd in @("npm", "npx")) {
              foreach ($ext in @(".ps1", ".cmd", "")) {
                if (Test-Path "$node_dir/$cmd$ext") {
                  rename-item -path (join-path -path $node_dir -childpath "$cmd$ext") "${cmd}-orig${ext}"
                }
              }
            }
            npm-orig install --global "npm@${Env:NPM_VERSION}"
      - run:
          name: Assert Node.js version
          command: |
            if ((node --version) -Ne "v${Env:NODE_VERSION}") { exit 1 }
      - run:
          name: Assert npm version
          command: |
            if ((npm --version) -Ne "${Env:NPM_VERSION}") { exit 1 }

  windows_prepare_rust_env:
    steps:
      - run:
          name: Install rustup
          environment:
            # Override auto-detection of RAM for Rustc install.
            # https://github.com/rust-lang/rustup/issues/2229#issuecomment-585855925
            RUSTUP_UNPACK_RAM: "21474836480"
          command: |
            $installer_dir = "$Env:TEMP"
            echo "Downloading rustup"
            (New-Object System.Net.WebClient).DownloadFile("https://win.rustup.rs/x86_64", "$installer_dir\rustup-init.exe")
            echo "Installing rustup"
            & $installer_dir\rustup-init.exe --profile minimal --component rustfmt,clippy -y
            exit $LASTEXITCODE
      - run:
          name: Special case for Windows because of ssh-agent
          command: |
            Add-Content -path "${Env:USERPROFILE}\.cargo\config.toml" @"
            [net]
            git-fetch-with-cli = true
            "@
  prepare_rust_env:
    steps:
      - rust/install:
          version: stable

  install_extra_tools:
    parameters:
      os:
        type: string
    steps:
      - restore_cache:
          keys:
            - rust-<< pipeline.parameters.cache_version >>-extra-tools-<< parameters.os >>
      - run:
          name: Install cargo deny if not present
          command: |
            set -e -o pipefail
            cargo deny --version || cargo install cargo-deny
      - run:
          name: Install cargo about if not present
          command: |
            set -e -o pipefail
            cargo about --version || cargo install cargo-about
      - save_cache:
          key: rust-<< pipeline.parameters.cache_version >>-extra-tools-<< parameters.os >>
          paths:
            - ~/.cargo/bin/cargo-deny
            - ~/.cargo/bin/cargo-about

  xtask_lint:
    parameters:
      os:
        type: string
    steps:
      - restore_cache:
          name: Restore .cargo
          keys:
            - rust-cargo-<< pipeline.parameters.cache_version >>-build-<< parameters.os >>-{{ checksum "Cargo.lock" }}
            - rust-cargo-<< pipeline.parameters.cache_version >>-build-<< parameters.os >>
      - run: cargo xtask lint

  xtask_check_compliance:
    parameters:
      os:
        type: string
    steps:
      - restore_cache:
          name: Restore .cargo
          keys:
            - rust-cargo-<< pipeline.parameters.cache_version >>-build-<< parameters.os >>-{{ checksum "Cargo.lock" }}
            - rust-cargo-<< pipeline.parameters.cache_version >>-build-<< parameters.os >>
      - install_extra_tools:
          os: << parameters.os >>
      # cargo-deny fetches a rustsec advisory DB, which has to happen on github.com over https
      - run: git config --global --unset-all url.ssh://git@github.com.insteadof
      - run: cargo xtask check-compliance

  build_common_permutations:
    steps:
      - rust/build:
          with_cache: false
          crate: --locked -p apollo-router
  build_all_permutations:
    steps:
      - build_common_permutations
      - run:
          name: cargo check workspace and benchmarks
          command: |
            set -e -o pipefail
            cargo check --locked --all --benches
  build_workspace:
    parameters:
      os:
        type: string
    steps:
      - restore_cache:
          name: Restore .cargo
          keys:
            - rust-cargo-<< pipeline.parameters.cache_version >>-build-<< parameters.os >>-{{ checksum "Cargo.lock" }}
            - rust-cargo-<< pipeline.parameters.cache_version >>-build-<< parameters.os >>
      - build_all_permutations
      - save_cache:
          name: Save .cargo
          key: rust-cargo-<< pipeline.parameters.cache_version >>-build-<< parameters.os >>-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo

  windows_build_workspace:
    steps:
      - restore_cache:
          name: Restore .cargo
          keys:
            - rust-cargo-<< pipeline.parameters.cache_version >>-build-windows-{{ checksum "Cargo.lock" }}
            - rust-cargo-<< pipeline.parameters.cache_version >>-build-windows
      - build_common_permutations
      - save_cache:
          name: Save .cargo
          key: rust-cargo-<< pipeline.parameters.cache_version >>-build-windows-{{ checksum "Cargo.lock" }}
          paths:
            - C:\\Users\\circleci\.cargo

  windows_test_workspace:
    steps:
      - run:
          name: Start jaeger
          background: true
          command: jaeger\jaeger-all-in-one.exe
      - restore_cache:
          name: Restore .cargo
          keys:
            - rust-cargo-<< pipeline.parameters.cache_version >>-test-windows-{{ checksum "Cargo.lock" }}
            - rust-cargo-<< pipeline.parameters.cache_version >>-test-windows
      - run: cargo test -p "apollo-router" -p "apollo-router-scaffold" --locked
      - save_cache:
          name: Save .cargo
          key: rust-cargo-<< pipeline.parameters.cache_version >>-test-windows-{{ checksum "Cargo.lock" }}
          paths:
            - C:\\Users\\circleci\.cargo

  test_workspace:
    parameters:
      os:
        type: string
    steps:
      - run:
          name: Start jaeger
          background: true
          command: ./jaeger/jaeger-all-in-one
      - restore_cache:
          name: Restore .cargo
          keys:
            - rust-cargo-<< pipeline.parameters.cache_version >>-test-<< parameters.os >>-{{ checksum "Cargo.lock" }}
            - rust-cargo-<< pipeline.parameters.cache_version >>-test-<< parameters.os >>

      # As of rustc 1.61.0, must limit the number of linux jobs or we run out of memory (large executor/8GB)
      - when:
          condition:
            equal: [linux, << parameters.os >>]
          steps:
            - run: cargo test --jobs 3 -p "apollo-router" -p "apollo-router-scaffold" --locked
      - when:
          condition:
            equal: [macos, << parameters.os >>]
          steps:
            - run: cargo test -p "apollo-router" -p "apollo-router-scaffold" --locked

      - save_cache:
          name: Save .cargo
          key: rust-cargo-<< pipeline.parameters.cache_version >>-test-<< parameters.os >>-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo

jobs:
  lint:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - when:
          condition:
            equal: [*rust_linux_executor, << parameters.platform >>]
          steps:
            - linux_install_baseline
            - linux_prepare_node_env
            - prepare_rust_env
            - xtask_lint:
                os: linux
  check_compliance:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - when:
          condition:
            equal: [*rust_linux_executor, << parameters.platform >>]
          steps:
            - linux_install_baseline
            - linux_prepare_node_env
            - prepare_rust_env
            - xtask_check_compliance:
                os: linux
  build:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - when:
          condition:
            equal: [*rust_linux_executor, << parameters.platform >>]
          steps:
            - linux_install_baseline
            - linux_prepare_node_env
            - prepare_rust_env
            - build_workspace:
                os: linux
      - when:
          condition:
            equal: [*rust_windows_executor, << parameters.platform >>]
          steps:
            - windows_install_baseline
            - windows_prepare_node_env
            - windows_prepare_rust_env
            - windows_build_workspace
      - when:
          condition:
            equal: [*rust_macos_executor, << parameters.platform >>]
          steps:
            - macos_install_baseline
            - macos_prepare_node_env
            - prepare_rust_env
            - build_workspace:
                os: macos
  test:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - when:
          condition:
            equal: [*rust_linux_executor, << parameters.platform >>]
          steps:
            - linux_install_baseline
            - linux_prepare_node_env
            - prepare_rust_env
            - test_workspace:
                os: linux
      - when:
          condition:
            equal: [*rust_windows_executor, << parameters.platform >>]
          steps:
            - windows_install_baseline
            - windows_prepare_node_env
            - windows_prepare_rust_env
            - windows_test_workspace
      - when:
          condition:
            equal: [*rust_macos_executor, << parameters.platform >>]
          steps:
            - macos_install_baseline
            - macos_prepare_node_env
            - prepare_rust_env
            - test_workspace:
                os: macos

  build_release:
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    environment:
      <<: *common_job_environment
      RELEASE_BIN: router
      APPLE_TEAM_ID: "YQK948L752"
      APPLE_USERNAME: "opensource@apollographql.com"
      MACOS_PRIMARY_BUNDLE_ID: com.apollographql.router
    steps:
      - checkout
      - run:
          name: Initialize submodules
          command: git submodule update --recursive --init
      - when:
          condition:
            equal: [*rust_macos_executor, << parameters.platform >>]
          steps:
            - run: echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $BASH_ENV
            - run: echo "export OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $BASH_ENV
            - run: test -e "$OPENSSL_ROOT_DIR"
            - run: brew install cmake
            - rust/install:
                version: stable
            # Installing this with the curl nvm command was proving difficult,
            # so I've opted to just install the .pkg.  Should be the same net
            # result, even if liked the opportunity for symmetry with Linux.
            - run:
                name: Installing Node.js with a .pkg.
                command: |
                  curl "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.pkg" > "$HOME/Downloads/node.pkg" && sudo installer -store -pkg "$HOME/Downloads/node.pkg" -target "/"
            - run:
                name: Install specific version of npm
                command: |
                  sudo npm install --global npm@${NPM_VERSION}
            - run:
                name: Assert Node.js version
                command: test "$(node --version)" = "v${NODE_VERSION}"
            - run:
                name: Assert npm version
                command: test "$(npm --version)" = "${NPM_VERSION}"
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package
                  --apple-team-id ${APPLE_TEAM_ID}
                  --apple-username ${APPLE_USERNAME}
                  --cert-bundle-base64 ${MACOS_CERT_BUNDLE_BASE64}
                  --cert-bundle-password ${MACOS_CERT_BUNDLE_PASSWORD}
                  --keychain-password ${MACOS_KEYCHAIN_PASSWORD}
                  --notarization-password ${MACOS_NOTARIZATION_PASSWORD}
                  --primary-bundle-id ${MACOS_PRIMARY_BUNDLE_ID}
                  --output artifacts/
      - when:
          condition:
            equal: [*rust_linux_executor, << parameters.platform >>]
          steps:
            - run:
                name: Update and install dependencies
                command: |
                  sudo apt-get update
                  sudo apt-get install -y libssl-dev
            - rust/install:
                version: stable
            - run:
                name: Install nvm
                command: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
            - run: echo '. ~/.nvm/nvm.sh' >> $BASH_ENV
            - run:
                name: Install desired Node.js version
                command: |
                  nvm install $NODE_VERSION
                  nvm alias default $NODE_VERSION
                  npm install --global npm@${NPM_VERSION}
            - run:
                name: Assert Node.js version
                command: test "$(node --version)" = "v${NODE_VERSION}"
            - run:
                name: Assert npm version
                command: test "$(npm --version)" = "${NPM_VERSION}"
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package --output artifacts/
      - when:
          condition:
            equal: [*rust_windows_executor, << parameters.platform >>]
          steps:
            - run:
                name: Install rustup
                environment:
                  # Override auto-detection of RAM for Rustc install.
                  # https://github.com/rust-lang/rustup/issues/2229#issuecomment-585855925
                  RUSTUP_UNPACK_RAM: "21474836480"
                command: |
                  $installer_dir = "$Env:TEMP"
                  echo "Downloading rustup"
                  (New-Object System.Net.WebClient).DownloadFile("https://win.rustup.rs/x86_64", "$installer_dir\rustup-init.exe")
                  echo "Installing rustup"
                  & $installer_dir\rustup-init.exe --profile minimal --component rustfmt,clippy -y
                  exit $LASTEXITCODE
            - run:
                name: Special case for Windows because of ssh-agent
                command: |
                  Add-Content -path "${Env:USERPROFILE}\.cargo\config.toml" @"
                  [net]
                  git-fetch-with-cli = true
                  "@
            - run:
                name: Install desired Node.js version with nvm
                command: |
                  nvm install ${Env:NODE_VERSION}
                  nvm on
            - run:
                # https://github.com/coreybutler/nvm-windows/issues/300
                # Have to move the command out of the way because it can't
                # overwrite itself otherwise.   This is madness, but apparently
                # accepted.  Other things I tried: using yarn to install npm,
                # using http://npm.im/npm-windows-upgrade and even shouting.
                name: Install specific version of npm in a crazy Windows way
                command: |
                  $node_dir = (get-item (get-command npm).source).directory.fullname
                  foreach ($cmd in @("npm", "npx")) {
                    foreach ($ext in @(".ps1", ".cmd", "")) {
                      if (Test-Path "$node_dir/$cmd$ext") {
                        rename-item -path (join-path -path $node_dir -childpath "$cmd$ext") "${cmd}-orig${ext}"
                      }
                    }
                  }
                  npm-orig install --global "npm@${Env:NPM_VERSION}"
            - run:
                name: Assert Node.js version
                command: |
                  if ((node --version) -Ne "v${Env:NODE_VERSION}") { exit 1 }
            - run:
                name: Assert npm version
                command: |
                  if ((npm --version) -Ne "${Env:NPM_VERSION}") { exit 1 }
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package --output artifacts
      - persist_to_workspace:
          root: artifacts
          paths:
            - "*"

  publish_github_release:
    docker:
      - image: cimg/base:stable
    resource_class: small
    environment:
      <<: *common_job_environment
      VERSION: << pipeline.git.tag >>
    steps:
      - checkout
      - attach_workspace:
          at: artifacts
      - gh/setup
      - run:
          command: >
            cd artifacts && sha256sum *.tar.gz > sha256sums.txt
      - run:
          command: >
            cd artifacts && md5sum *.tar.gz > md5sums.txt
      - run:
          command: >
            cd artifacts && sha1sum *.tar.gz > sha1sums.txt
      - run:
          command: >
            gh release create $VERSION --notes-file NEXT_CHANGELOG.md --title $VERSION artifacts/*
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - run:
          name: Docker build
          command: |
            ROUTER_RELEASE=${VERSION:1}
            ROUTER_TAG=ghcr.io/apollographql/router
            # Build debug image
            docker build --build-arg ROUTER_RELEASE=${ROUTER_RELEASE} --build-arg DEBUG_IMAGE=":debug" -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:v${ROUTER_RELEASE}-debug .
            # Build release image
            docker build --build-arg ROUTER_RELEASE=${ROUTER_RELEASE} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION} .
            # NB: GH token expires 30/3/2023
            echo ${GITHUB_DOCKER_TOKEN} | docker login ghcr.io -u garypen --password-stdin
            # Push debug image
            docker push ${ROUTER_TAG}:${VERSION}-debug
            # Push release image
            docker push ${ROUTER_TAG}:${VERSION}

workflows:
  ci_checks:
    jobs:
      - lint:
          matrix:
            parameters:
              platform: [rust_linux]
      - check_compliance:
          matrix:
            parameters:
              platform: [rust_linux]
      - build:
          matrix:
            parameters:
              platform: [rust_macos, rust_windows, rust_linux]
      - test:
          matrix:
            parameters:
              platform: [rust_macos, rust_windows, rust_linux]
  release:
    jobs:
      - build_release:
          matrix:
            parameters:
              platform: [rust_macos, rust_windows, rust_linux]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - publish_github_release:
          requires: [build_release]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/

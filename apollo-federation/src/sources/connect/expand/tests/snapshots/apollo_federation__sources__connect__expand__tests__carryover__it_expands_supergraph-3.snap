---
source: apollo-federation/src/sources/connect/expand/tests/mod.rs
expression: raw_sdl
---
schema @link(url: "https://specs.apollo.dev/link/v1.0") @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY) @link(url: "https://specs.apollo.dev/tag/v0.3") {
  query: Query
}

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on INTERFACE | OBJECT

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

enum link__Purpose {
  """
  SECURITY features provide metadata necessary to securely resolve fields.
  """
  SECURITY
  """EXECUTION features provide metadata necessary for operation execution."""
  EXECUTION
}

scalar link__Import

scalar join__FieldSet

enum join__Graph {
  ONE_QUERY_T_0 @join__graph(name: "one_Query_t_0", url: "none")
  ONE_QUERY_TS_0 @join__graph(name: "one_Query_ts_0", url: "none")
  ONE_T_R_0 @join__graph(name: "one_T_r_0", url: "none")
  TWO @join__graph(name: "two", url: "none")
}

type T @join__type(graph: ONE_QUERY_T_0, key: "id") @join__type(graph: ONE_QUERY_TS_0) @join__type(graph: ONE_T_R_0, key: "id") @join__type(graph: TWO, key: "id") {
  hidden: String @join__field(graph: ONE_QUERY_T_0) @join__field(graph: ONE_QUERY_TS_0) @inaccessible
  id: ID! @join__field(graph: ONE_QUERY_T_0) @join__field(graph: ONE_QUERY_TS_0) @join__field(graph: ONE_T_R_0) @join__field(graph: TWO)
  overridden: String @join__field(graph: ONE_QUERY_T_0, override: "two", overrideLabel: "label") @join__field(graph: ONE_QUERY_TS_0, override: "two", overrideLabel: "label") @join__field(graph: TWO)
  tagged: String @join__field(graph: ONE_QUERY_T_0) @join__field(graph: ONE_QUERY_TS_0) @tag(name: "tag")
  r: R @join__field(graph: ONE_T_R_0)
}

type Query @join__type(graph: ONE_QUERY_T_0) @join__type(graph: ONE_QUERY_TS_0) @join__type(graph: ONE_T_R_0) @join__type(graph: TWO) {
  t(id: ID): T @join__field(graph: ONE_QUERY_T_0)
  ts: [T] @join__field(graph: ONE_QUERY_TS_0)
  _: ID @inaccessible @join__field(graph: ONE_T_R_0)
}

type R @join__type(graph: ONE_T_R_0) {
  id: ID! @join__field(graph: ONE_T_R_0)
}

schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(
    url: "https://specs.apollo.dev/source/v0.1"
    import: ["@sourceAPI", "@sourceType", "@sourceField"]
  )
  @join__directive(
    graphs: [NETWORK]
    name: "sourceAPI"
    args: { name: "ipinfo", http: { baseURL: "https://ip.demo.starstuff.dev" } }
  )
  @join__directive(
    graphs: [NETWORK]
    name: "sourceAPI"
    args: {
      name: "weather"
      http: { baseURL: "https://weather.demo.starstuff.dev" }
    }
  ) {
  query: Query
  mutation: Mutation
}

directive @join__schema(
  graph: join__Graph
  directives: join__FieldSet
) repeatable on SCHEMA

directive @join__directive(
  graphs: [join__Graph!]
  name: String!
  args: join__DirectiveArguments
) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

scalar join__DirectiveArguments
  @specifiedBy(url: "http://just-to-avoid-valiadation-warnings")

directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

scalar join__FieldSet
  @specifiedBy(url: "http://just-to-avoid-valiadation-warnings")

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
  directives: join__FieldSet
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
  directives: join__FieldSet
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

scalar link__Import
  @specifiedBy(url: "http://just-to-avoid-valiadation-warnings")

enum join__Graph {
  ACCOUNTS
    @join__graph(name: "accounts", url: "https://accounts.demo.starstuff.dev")
  INVENTORY
    @join__graph(name: "inventory", url: "https://inventory.demo.starstuff.dev")
  PRODUCTS
    @join__graph(name: "products", url: "https://products.demo.starstuff.dev")
  REVIEWS
    @join__graph(name: "reviews", url: "https://reviews.demo.starstuff.dev")
  NETWORK @join__graph(name: "network", url: "http://network-subgraph")
}

type Query
  @join__type(graph: ACCOUNTS)
  @join__type(graph: PRODUCTS)
  @join__type(graph: NETWORK) {
  me: User @join__field(graph: ACCOUNTS)
  serverNetworkInfo: IP
    @join__field(graph: NETWORK)
    @join__directive(
      graphs: [NETWORK]
      name: "sourceField"
      args: {
        api: "ipinfo"
        http: { GET: "/json" }
        selection: "ip hostname city region country loc org postal timezone readme"
      }
    )
  topProducts(first: Int = 5): [Product] @join__field(graph: PRODUCTS)
}

type Mutation @join__type(graph: REVIEWS) @join__type(graph: PRODUCTS) {
  createProduct(name: String, upc: ID!): Product @join__field(graph: PRODUCTS)
  createReview(body: String, id: ID!, upc: ID!): Review
    @join__field(graph: REVIEWS)
}

type Product
  @join__type(graph: INVENTORY, key: "upc")
  @join__type(graph: PRODUCTS, key: "upc")
  @join__type(graph: REVIEWS, key: "upc") {
  upc: String!
  weight: Int
    @join__field(graph: INVENTORY, external: true)
    @join__field(graph: PRODUCTS)
  price: Int
    @join__field(graph: INVENTORY, external: true)
    @join__field(graph: PRODUCTS)
  inStock: Boolean @join__field(graph: INVENTORY)
  shippingEstimate: Int @join__field(graph: INVENTORY, requires: "price weight")
  name: String @join__field(graph: PRODUCTS)
  reviews: [Review] @join__field(graph: REVIEWS)
  reviewsForAuthor(authorID: ID!): [Review] @join__field(graph: REVIEWS)
}

type Review @join__type(graph: REVIEWS, key: "id") {
  id: ID!
  body: String
  author: User @join__field(graph: REVIEWS, provides: "username")
  product: Product
}

type User
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: REVIEWS, key: "id")
  @join__type(graph: NETWORK, key: "id") {
  id: ID!
  name: String @join__field(graph: ACCOUNTS)
  username: String
    @join__field(graph: ACCOUNTS)
    @join__field(graph: REVIEWS, external: true)
  reviews: [Review] @join__field(graph: REVIEWS)
  ip: IP
    @join__field(graph: NETWORK)
    @join__directive(
      graphs: [NETWORK]
      name: "sourceField"
      args: {
        api: "ipinfo"
        http: { GET: "/json" }
        selection: "ip hostname city region country loc org postal timezone readme"
      }
    )
  weather: Weather
    @join__field(graph: NETWORK)
    @join__directive(
      graphs: [NETWORK]
      name: "sourceField"
      args: {
        api: "weather"
        http: { GET: "/data/2.5/weather" }
        selection: """
        name: .weather.main
        description: .weather.description
        temp: .main.temp
        feels_like: .main.feels_like
        min: .main.temp_min
        max: .main.temp_max
        details: .weather {
          id
          description
          name: main
        }
        """
      }
    )
}

type Weather
  @join__type(graph: NETWORK, key: "id")
  @join__type(graph: ACCOUNTS)
  @join__type(graph: REVIEWS) {
  id: ID
  temp: Float
  feels_like: Float
  min: Float
  max: Float
  main: String
  details: [WeatherDetails]
  description: [String]
  name: [String]
}

type WeatherDetails
  @join__type(graph: NETWORK, key: "id")
  @join__type(graph: ACCOUNTS)
  @join__type(graph: REVIEWS) {
  id: ID
  description: String
  name: String
}

type IP
  @join__type(graph: ACCOUNTS)
  @join__type(graph: PRODUCTS)
  @join__type(graph: REVIEWS)
  @join__type(
    graph: NETWORK
    key: "ip"
    directives: [
      {
        name: "sourceType"
        args: {
          api: "ipinfo"
          http: { GET: "/json" }
          selection: "ip hostname city region country loc org postal timezone readme"
        }
      }
    ]
  ) {
  ip: ID!
  hostname: String
  city: String
  region: String
  country: String
  loc: String
  org: String
  postal: String
  timezone: String
  readme: String
}
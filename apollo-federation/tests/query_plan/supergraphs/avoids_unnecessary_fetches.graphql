# Composed from subgraphs with hash: 18e2cb5dae85e435398e8667f6866178c8022706
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type A
  @join__type(graph: SUBGRAPH1, key: "idA2")
  @join__type(graph: SUBGRAPH3, key: "idA1")
  @join__type(graph: SUBGRAPH4, key: "idA1")
  @join__type(graph: SUBGRAPH4, key: "idA2")
{
  idA2: ID! @join__field(graph: SUBGRAPH1) @join__field(graph: SUBGRAPH4)
  idA1: ID! @join__field(graph: SUBGRAPH3) @join__field(graph: SUBGRAPH4)
}

scalar join__FieldSet

enum join__Graph {
  SUBGRAPH1 @join__graph(name: "Subgraph1", url: "none")
  SUBGRAPH2 @join__graph(name: "Subgraph2", url: "none")
  SUBGRAPH3 @join__graph(name: "Subgraph3", url: "none")
  SUBGRAPH4 @join__graph(name: "Subgraph4", url: "none")
  SUBGRAPH5 @join__graph(name: "Subgraph5", url: "none")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: SUBGRAPH1)
  @join__type(graph: SUBGRAPH2)
  @join__type(graph: SUBGRAPH3)
  @join__type(graph: SUBGRAPH4)
  @join__type(graph: SUBGRAPH5)
{
  t: T @join__field(graph: SUBGRAPH1)
}

type T
  @join__type(graph: SUBGRAPH1, key: "idT")
  @join__type(graph: SUBGRAPH2, key: "idT")
{
  idT: ID!
  a: A @join__field(graph: SUBGRAPH1)
  u: U @join__field(graph: SUBGRAPH2)
}

type U
  @join__type(graph: SUBGRAPH2, key: "idU")
  @join__type(graph: SUBGRAPH5, key: "idU")
{
  idU: ID!
  v: Int @join__field(graph: SUBGRAPH5)
}

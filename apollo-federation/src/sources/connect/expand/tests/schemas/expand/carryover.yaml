subgraphs:
  one:
    routing_url: none
    schema:
      sdl: |
        extend schema
          @link(url: "https://specs.apollo.dev/federation/v2.8", import: [
              "@key",
              "@inaccessible", "@tag", "@override",
              "@authenticated", "@requiresScopes", "@policy",
              "@composeDirective"
            ]
          )
          @link(url: "http://specs.example.org/custom/v0.1", import: ["@custom"])
          @link(url: "https://specs.apollo.dev/connect/v0.1", import: ["@connect", "@source"])
          @composeDirective(name: "@custom")
          @source(name: "json" http: { baseURL: "http://example/" })

        type Query {
          ts: [T] @connect(
            source: "json"
            http: { GET: "/t" }
            selection: """
              id
              tagged
              hidden
              custom
              authenticated
              requiresScopes
              policy
              overridden
            """
          )
          t(id: ID): T @connect(
            source: "json"
            http: { GET: "/t/{$$args.id}" }
            selection: """
              id
              tagged
              hidden
              custom
              authenticated
              requiresScopes
              policy
              overridden
            """
            entity: true
          )
        }

        type T @key(fields: "id") {
          id: ID!
          tagged: String @tag(name: "tag")
          hidden: String @inaccessible
          custom: String @custom
          authenticated: String @authenticated
          requiresScopes: String @requiresScopes(scopes: ["scope"])
          policy: String @policy(policies: [["admin"]])
          overridden: String @override(from: "two", label: "label")
          r: R @connect(
            source: "json"
            http: { GET: "/t/{$$this.id}/r" }
            selection: "id"
          )
        }

        type R {
          id: ID!
        }

        # bug fix: this won't compose until it's fixed and released in federation
        # the graphql file is currently hand-edited to add these definitions
        directive @custom on OBJECT | FIELD_DEFINITION
        # directive @custom(s: custom__Scalar, e: custom__Enum, i: custom__Input) on OBJECT | FIELD_DEFINITION
        # scalar custom__Scalar

        # enum custom__Enum {
        #   ONE
        #   TWO
        # }

        # input custom__Input {
        #   one: String
        #   two: String
        # }
  two:
    routing_url: none
    schema:
      sdl: |
        extend schema
          @link(url: "https://specs.apollo.dev/federation/v2.8", import: ["@key", "@context", "@fromContext"])
        type T @key(fields: "id") {
          id: ID!
          overridden: String
        }

        type Query {
          z: Z
        }

        type Z @key(fields: "id") @context(name: "ctx") {
          id: ID!
          y: String
          x: X
        }

        type X @key(fields: "id") {
          id: ID!
          w(z: String @fromContext(field: "$$ctx { y }")): String
        }
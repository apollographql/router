# Use the rust build image from docker as our base
# renovate-automation: rustc version
FROM rust:1.67.0 as build

# Set our working directory for the build
WORKDIR /usr/src/router

# Update our build image and install required packages
RUN apt-get update
RUN apt-get -y install \
    npm \
    nodejs \
    protobuf-compiler

# Add rustfmt since build requires it
RUN rustup component add rustfmt

# Copy the router source to our build environment
COPY . .

# Build and install the router
RUN cargo install --path apollo-router

# Make directories for config and schema
RUN mkdir -p /dist/config && \
    mkdir /dist/schema && \
    mv /usr/local/cargo/bin/router /dist

# Copy configuration for docker image
COPY dockerfiles/router.yaml /dist/config

# Build our final image
FROM debian:bullseye-slim

ARG DEBUG_IMAGE=false

WORKDIR /dist

# Install curl
RUN \
  apt-get update -y \
  && apt-get install -y \
    curl

# Copy in the required files from our build image
COPY --from=build --chown=root:root /dist /dist

# If debug image, install heaptrack and make a data directory
RUN \
  if [ "${DEBUG_IMAGE}" = "true" ]; then \
    apt-get install -y heaptrack && \
    mkdir data; \
  fi

# Clean up apt lists
RUN rm -rf /var/lib/apt/lists/*

# Set labels for our image
LABEL org.opencontainers.image.authors="Apollo Graph, Inc. https://github.com/apollographql/router"
LABEL org.opencontainers.image.source="https://github.com/apollographql/router"

ENV APOLLO_ROUTER_CONFIG_PATH="/dist/config/router.yaml"

# Create a wrapper script to run the router, use exec to ensure signals are handled correctly
RUN \
  echo '#!/usr/bin/env bash \
\nset -e \
\n \
\nif [ -f "/usr/bin/heaptrack" ]; then \
\n    exec heaptrack -o /dist/data/router_heaptrack /dist/router "$@" \
\nelse \
\n    exec /dist/router "$@" \
\nfi \
' > /dist/router_wrapper.sh

# Make sure we can run our wrapper
RUN chmod 755 /dist/router_wrapper.sh

# Default executable is the wrapper script
ENTRYPOINT ["/dist/router_wrapper.sh"]

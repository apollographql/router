schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
  query: Query
}

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @tag(
  name: String!
) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

scalar join__FieldSet
scalar link__Import

enum join__Graph {
  ACCOUNTS
    @join__graph(name: "accounts", url: "https://accounts.demo.starstuff.dev/")
  INVENTORY
    @join__graph(
      name: "inventory"
      url: "https://inventory.demo.starstuff.dev/"
    )
  PRODUCTS
    @join__graph(name: "products", url: "https://products.demo.starstuff.dev/")
  REVIEWS
    @join__graph(name: "reviews", url: "https://reviews.demo.starstuff.dev/")
}

enum link__Purpose {
  SECURITY
  EXECUTION
}

type Query
  @join__type(graph: ACCOUNTS) {
  a: A @join__field(graph: ACCOUNTS)
  d: D @join__field(graph: ACCOUNTS)
  e: E @join__field(graph: ACCOUNTS)
}

type A @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: REVIEWS, key: "id") {
    id: ID!
    a: String @join__field(graph: ACCOUNTS) @join__field(graph: REVIEWS, external: true)
    b: B @join__field(graph: REVIEWS, requires: "a") @join__field(graph: PRODUCTS, external: true)
    c: C @join__field(graph: PRODUCTS, requires: "b { b }")
}

type B @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: REVIEWS, key: "id") {
    id: ID!
    b: String @join__field(graph: REVIEWS) @join__field(graph: PRODUCTS, external: true)
}

type C @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: REVIEWS, key: "id") {
    id: ID!
    c: String @join__field(graph: PRODUCTS)
}

type D
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: PRODUCTS, key: "id") {
    id: ID!
    i: I @join__field(graph: ACCOUNTS) @join__field(graph: PRODUCTS, external: true)
    j: String @join__field(graph: PRODUCTS, requires: "i { x ... on XY { y } ... on XZ { z } }")
}

interface I
  @join__type(graph: ACCOUNTS)
  @join__type(graph: INVENTORY)
  @join__type(graph: PRODUCTS)
  @join__type(graph: REVIEWS) {
  x: String
}

type XY implements I
  @join__type(graph: INVENTORY, key: "upc")
  @join__type(graph: PRODUCTS, key: "upc"){
  upc: String!
  x: String
  y: String @join__field(graph: PRODUCTS, external: true)
}

type XZ implements I
  @join__type(graph: INVENTORY, key: "upc")
  @join__type(graph: PRODUCTS, key: "upc") {
  upc: String!
  x: String
  z: String @join__field(graph: PRODUCTS, external: true)
}

type E
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: PRODUCTS, key: "id") {
    id: ID!
    u: U @join__field(graph: ACCOUNTS) @join__field(graph: PRODUCTS, external: true)
    v: String @join__field(graph: PRODUCTS , requires: "u { ... on UA { a } ... on UB { b } }")
}


union U
@join__type(graph: ACCOUNTS)
@join__type(graph: PRODUCTS)
@join__type(graph: REVIEWS)
= UA | UB

type UA
  @join__type(graph: PRODUCTS) {
    a: String 
}

type UB
  @join__type(graph: REVIEWS)
  @join__type(graph: PRODUCTS) {
    b: String @join__field(graph: PRODUCTS, external: true)
}
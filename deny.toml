# This section is considered when running `cargo deny check advisories`
# More documentation for the advisories section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html
[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"
# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for unmaintained crates
unmaintained = "workspace"
# The lint level for crates that have been yanked from their source registry
yanked = "warn"

# If this is true, then cargo deny will use the git executable to fetch advisory database.
# If this is false, then it uses a built-in git library.
# Setting this to true can be helpful if you have special authentication requirements that cargo-deny does not support.
# See Git Authentication for more information about setting up git authentication.
git-fetch-with-cli = true

# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.

# rustsec advisory exemptions
ignore = [
    "RUSTSEC-2023-0071",
    "RUSTSEC-2024-0376", # we do not use tonic::transport::Server
    "RUSTSEC-2024-0421", # we only resolve trusted subgraphs

    # protobuf is used only through prometheus crates, enforced by
    # a `[bans]` entry below. in the prometheus crates, only the protobuf
    # encoder is used, while only the decoder is affected by this advisory.
    "RUSTSEC-2024-0437",

    # The following crates are unmaintained
    "RUSTSEC-2024-0320", # TODO replace the `yaml-rust` crate with a maintained equivalent
    "RUSTSEC-2024-0436", # TODO replace the `paste` crate with a maintained equivalent
    "RUSTSEC-2024-0388", # TODO replace the `derivative` crate with a maintained equivalent
]

# This section is considered when running `cargo deny check licenses`
# More documentation for the licenses section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html
[licenses]
# List of explictly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.11 short identifier (+ optional exception)].
allow = [
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "CC0-1.0",
    "ISC",
    "LicenseRef-ring",
    "MIT",
    "MPL-2.0",
    "Elastic-2.0",
    "OpenSSL", # required by aws-lc-sys
    "Unicode-DFS-2016",
    "Unicode-3.0",
    "Zlib",
    "NCSA", # similar to MIT/BSD-3-Clause, used by libfuzzer
    "CDLA-Permissive-2.0", # webpki-roots
]
confidence-threshold = 0.8

# ring has a rather complicated LICENSE file due to reasons spelled out
# in said LICENSE file, but is basically OpenSSL for older parts, and ISC
# for newer parts
[[licenses.clarify]]
name = "ring"
expression = "LicenseRef-ring"
version = "0.16.20"
license-files = [{ path = "LICENSE", hash = 0xbd0eed23 }]

[[licenses.clarify]]
name = "encoding_rs"
version = "*"
expression = "(Apache-2.0 OR MIT) AND BSD-3-Clause"
license-files = [{ path = "COPYRIGHT", hash = 0x39f8ad31 }]

# This section is considered when running `cargo deny check bans`.
# More documentation about the 'bans' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html
[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "warn"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
# * lowest-version - The path to the lowest versioned duplicate is highlighted
# * simplest-path - The path to the version with the fewest edges is highlighted
# * all - Both lowest-version and simplest-path are used
highlight = "all"

# List of crates to deny
deny = [
  { crate = "openssl-sys" },
  # Prevent adding new dependencies on protobuf that may use code with
  # a security advisory in it (see `[advisories]`).
  # If you *must* add a new crate to the "wrappers" here, carefully audit
  # that it is *not* affected by any of the advisories above.
  { crate = "protobuf:<3.7.2", wrappers = ["prometheus", "opentelemetry-prometheus"] },
]

# This section is considered when running `cargo deny check sources`.
# More documentation about the 'sources' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html
[sources]
# Lint level for what to happen when a crate from a crate registry that is not
# in the allow list is encountered
unknown-registry = "deny"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "deny"
# List of URLs for allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]

[sources.allow-org]
# 1 or more github.com organizations to allow git sources for
github = ["open-telemetry", "apollographql", "tokio-rs"]

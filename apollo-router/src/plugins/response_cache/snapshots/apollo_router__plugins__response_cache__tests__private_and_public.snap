---
source: apollo-router/src/plugins/response_cache/tests.rs
expression: cache_keys
---
[
  {
    "key": "version:1.0:subgraph:orga:type:Query:hash:d2121420bf697ae407e8b32d950b8778890172bf1f013f687f9c52cf8e54c10a:data:070af9367f9025bd796a1b7e0cd1335246f658aa4857c3a4d6284673b7d07fa6:cde13a55f41e387480391c47238acfe9c0136dd56bf365b01416aec03eec7dc4",
    "invalidationKeys": [],
    "kind": {
      "rootFields": [
        "orga"
      ]
    },
    "subgraphName": "orga",
    "subgraphRequest": {
      "query": "{ orga(id: \"2\") { name } }"
    },
    "source": "subgraph",
    "cacheControl": {
      "created": 0,
      "maxAge": 86400,
      "private": true
    },
    "shouldStore": true,
    "hashedPrivateId": "cde13a55f41e387480391c47238acfe9c0136dd56bf365b01416aec03eec7dc4",
    "data": {
      "data": {
        "orga": {
          "name": "test_orga"
        }
      }
    },
    "warnings": [
      {
        "code": "NO_CACHE_TAG_ON_ROOT_FIELD",
        "links": [
          {
            "url": "https://www.apollographql.com/docs/graphos/routing/performance/caching/response-caching/invalidation#invalidation-methods",
            "title": "Add '@cacheTag' in your schema"
          }
        ],
        "message": "No cache tags are specified on your root fields query, if you want to use active invalidation you'll need to add cache tags on your root fields to actively invalidate cached data"
      }
    ]
  },
  {
    "key": "version:1.0:subgraph:user:type:Query:hash:fa8ff6a034f5ccb3f49e51bc30ff031104ba420310e67764f9e9f82702437592:data:070af9367f9025bd796a1b7e0cd1335246f658aa4857c3a4d6284673b7d07fa6",
    "invalidationKeys": [
      "currentUser"
    ],
    "kind": {
      "rootFields": [
        "currentUser"
      ]
    },
    "subgraphName": "user",
    "subgraphRequest": {
      "query": "{ currentUser { activeOrganization { __typename id } } }"
    },
    "source": "subgraph",
    "cacheControl": {
      "created": 0,
      "maxAge": 86400,
      "public": true
    },
    "shouldStore": true,
    "hashedPrivateId": "cde13a55f41e387480391c47238acfe9c0136dd56bf365b01416aec03eec7dc4",
    "data": {
      "data": {
        "currentUser": {
          "activeOrganization": {
            "__typename": "Organization",
            "id": "1"
          }
        }
      }
    },
    "warnings": []
  },
  {
    "key": "version:1.0:subgraph:orga:type:Organization:entity:07f0ad9351c409fd3acfae0be59e64f218dc486d6dbe0081e68794673b96df73:representation::hash:f6acbaaee10175327fa6a7882704a4e85b732d7561e7c399fd49069486da68b8:data:070af9367f9025bd796a1b7e0cd1335246f658aa4857c3a4d6284673b7d07fa6:cde13a55f41e387480391c47238acfe9c0136dd56bf365b01416aec03eec7dc4",
    "invalidationKeys": [
      "organization",
      "organization-1"
    ],
    "kind": {
      "typename": "Organization",
      "entityKey": {
        "id": "1"
      }
    },
    "subgraphName": "orga",
    "subgraphRequest": {
      "query": "query($representations: [_Any!]!) { _entities(representations: $representations) { ... on Organization { creatorUser { __typename id } } } }",
      "variables": {
        "representations": [
          {
            "id": "1",
            "__typename": "Organization"
          }
        ]
      }
    },
    "source": "subgraph",
    "cacheControl": {
      "created": 0,
      "maxAge": 86400,
      "private": true
    },
    "shouldStore": true,
    "hashedPrivateId": "cde13a55f41e387480391c47238acfe9c0136dd56bf365b01416aec03eec7dc4",
    "data": {
      "data": {
        "creatorUser": {
          "__typename": "User",
          "id": 2
        }
      }
    },
    "warnings": []
  }
]

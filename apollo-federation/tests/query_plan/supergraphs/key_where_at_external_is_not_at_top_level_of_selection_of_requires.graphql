# Composed from subgraphs with hash: c1a3645bcd1d5de8ffaaafc2db246bb829597152
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  A @join__graph(name: "A", url: "none")
  B @join__graph(name: "B", url: "none")
  C @join__graph(name: "C", url: "none")
}

type K
  @join__type(graph: A, key: "id")
  @join__type(graph: B, key: "id")
  @join__type(graph: C, key: "id")
{
  id: ID!
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: A)
  @join__type(graph: B)
  @join__type(graph: C)
{
  u: U! @join__field(graph: A)
}

type U
  @join__type(graph: A, key: "k1 { id }")
  @join__type(graph: B, key: "k1 { id }")
  @join__type(graph: B, key: "k2")
  @join__type(graph: C, key: "k1 { id }")
  @join__type(graph: C, key: "k2")
{
  k1: K @join__field(graph: A, type: "K") @join__field(graph: B, type: "K!") @join__field(graph: C, type: "K!")
  k2: ID! @join__field(graph: B) @join__field(graph: C)
  v: V! @join__field(graph: B, external: true) @join__field(graph: C)
  f: ID! @join__field(graph: B, requires: "v { v }")
  f2: Int! @join__field(graph: B)
}

type V
  @join__type(graph: B, key: "id")
  @join__type(graph: C, key: "id")
{
  id: ID!
  v: String! @join__field(graph: B, external: true) @join__field(graph: C)
}

schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
  query: Query
}

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @tag(
  name: String!
) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

scalar join__FieldSet
scalar link__Import

enum join__Graph {
  ACCOUNTS
    @join__graph(name: "accounts", url: "https://accounts.demo.starstuff.dev/")
  INVENTORY
    @join__graph(
      name: "inventory"
      url: "https://inventory.demo.starstuff.dev/"
    )
  PRODUCTS
    @join__graph(name: "products", url: "https://products.demo.starstuff.dev/")
  REVIEWS
    @join__graph(name: "reviews", url: "https://reviews.demo.starstuff.dev/")
}

enum link__Purpose {
  SECURITY
  EXECUTION
}

type Query
  @join__type(graph: ACCOUNTS)
  @join__type(graph: REVIEWS) {
  i: [I] @join__field(graph: ACCOUNTS)
  req: C @join__field(graph: ACCOUNTS)
}

interface I
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: PRODUCTS, key: "id", isInterfaceObject: true)
  @join__type(graph: REVIEWS) {
  id: ID!
  x: Int @join__field(graph: ACCOUNTS) @join__field(graph: REVIEWS)
  y: Int @join__field(graph: PRODUCTS) @join__field(graph: REVIEWS)
}

type A implements I
  @join__type(graph: ACCOUNTS, key: "id")
  @join__implements(graph: ACCOUNTS, interface: "I") {
  id: ID!
  x: Int
  y: Int @join__field
  a: String
}

type B implements I
  @join__type(graph: ACCOUNTS, key: "id")
  @join__implements(graph: ACCOUNTS, interface: "I") {
  id: ID!
  x: Int
  y: Int @join__field
  b: String
}

type C
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: REVIEWS, key: "id") {
  id: ID!
  i: I @join__field(graph: ACCOUNTS) @join__field(graph: REVIEWS, external: true)
  c: String @join__field(graph: REVIEWS, requires: "i { x y }")
}
---
source: apollo-federation/src/connectors/expand/tests/mod.rs
expression: raw_sdl
input_file: apollo-federation/src/connectors/expand/tests/schemas/expand/carryover.graphql
---
schema @link(url: "https://specs.apollo.dev/link/v1.0") @link(url: "https://specs.apollo.dev/join/v0.5", for: EXECUTION) @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY) @join__directive(graphs: [], name: "link", args: {url: "https://specs.apollo.dev/connect/v0.1"}) @link(url: "https://specs.apollo.dev/connect/v0.2", for: EXECUTION) @link(url: "https://specs.apollo.dev/tag/v0.3") @link(url: "https://specs.apollo.dev/authenticated/v0.1", for: SECURITY) @link(url: "https://specs.apollo.dev/requiresScopes/v0.1", for: SECURITY) @link(url: "https://specs.apollo.dev/policy/v0.1", for: SECURITY) @link(url: "http://specs.example.org/custom/v0.1", import: ["@custom"]) @link(url: "http://specs.example.org/custom2/v0.1", import: ["@custom2"]) @link(url: "http://specs.example.org/custom3/v0.1", import: ["@custom3"]) @link(url: "https://specs.apollo.dev/context/v0.1", for: SECURITY) {
  query: Query
}

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String, usedOverridden: Boolean, contextArguments: [join__ContextArgument!]) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on INTERFACE | OBJECT

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments!) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

directive @authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @requiresScopes(scopes: [[requiresScopes__Scope!]!]!) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @policy(policies: [[policy__Policy!]!]!) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @custom(s: custom__Scalar, e: custom__Enum, i: custom__Input) on OBJECT | FIELD_DEFINITION

directive @custom2(s: custom__Scalar2, e: custom__Enum2, i: custom__Input2) on OBJECT | FIELD_DEFINITION

directive @custom3(s: custom__Scalar3, e: custom__Enum3, i: custom__Input3) on OBJECT | FIELD_DEFINITION

directive @context(name: String!) repeatable on INTERFACE | OBJECT | UNION

enum link__Purpose {
  """
  SECURITY features provide metadata necessary to securely resolve fields.
  """
  SECURITY
  """EXECUTION features provide metadata necessary for operation execution."""
  EXECUTION
}

scalar link__Import

scalar join__FieldSet

scalar join__FieldValue

input join__ContextArgument {
  name: String!
  type: String!
  context: String!
  selection: join__FieldValue!
}

scalar join__DirectiveArguments

enum join__Graph {
  ONE_QUERY_T_0 @join__graph(name: "one_Query_t_0", url: "none")
  ONE_QUERY_TS_0 @join__graph(name: "one_Query_ts_0", url: "none")
  ONE_T_R_0 @join__graph(name: "one_T_r_0", url: "none")
  TWO @join__graph(name: "two", url: "none")
}

enum TEnum @join__type(graph: ONE_QUERY_T_0) @join__type(graph: ONE_QUERY_TS_0) {
  ONE @join__enumValue(graph: ONE_QUERY_T_0) @join__enumValue(graph: ONE_QUERY_TS_0)
  TWO @join__enumValue(graph: ONE_QUERY_T_0) @join__enumValue(graph: ONE_QUERY_TS_0)
}

type T @join__type(graph: ONE_QUERY_T_0, key: "id") @join__type(graph: ONE_QUERY_TS_0) @join__type(graph: ONE_T_R_0, key: "id") @join__type(graph: TWO, key: "id") {
  authenticated: String @join__field(graph: ONE_QUERY_T_0, type: "String") @join__field(graph: ONE_QUERY_TS_0, type: "String") @authenticated
  custom: String @join__field(graph: ONE_QUERY_T_0, type: "String") @join__field(graph: ONE_QUERY_TS_0, type: "String") @custom @custom2
  hidden: String @join__field(graph: ONE_QUERY_T_0, type: "String") @join__field(graph: ONE_QUERY_TS_0, type: "String") @inaccessible
  id: ID! @join__field(graph: ONE_QUERY_T_0, type: "ID!") @join__field(graph: ONE_QUERY_TS_0, type: "ID!") @join__field(graph: ONE_T_R_0, type: "ID!") @join__field(graph: TWO, type: "ID!")
  overridden: String @join__field(graph: ONE_QUERY_T_0, override: "two", overrideLabel: "label", type: "String") @join__field(graph: ONE_QUERY_TS_0, override: "two", overrideLabel: "label", type: "String") @join__field(graph: TWO, type: "String")
  policy: String @join__field(graph: ONE_QUERY_T_0, type: "String") @join__field(graph: ONE_QUERY_TS_0, type: "String") @policy(policies: [["admin"]])
  requiresScopes: String @join__field(graph: ONE_QUERY_T_0, type: "String") @join__field(graph: ONE_QUERY_TS_0, type: "String") @requiresScopes(scopes: ["scope"])
  tagged: TEnum @join__field(graph: ONE_QUERY_T_0, type: "TEnum") @join__field(graph: ONE_QUERY_TS_0, type: "TEnum") @tag(name: "tag")
  r: R @join__field(graph: ONE_T_R_0, type: "R")
}

type Query @join__type(graph: ONE_QUERY_T_0) @join__type(graph: ONE_QUERY_TS_0) @join__type(graph: ONE_T_R_0) @join__type(graph: TWO) {
  t(id: ID): T @join__field(graph: ONE_QUERY_T_0, type: "T")
  ts: [T] @join__field(graph: ONE_QUERY_TS_0, type: "[T]")
  _: ID @inaccessible @join__field(graph: ONE_T_R_0, type: "ID")
  z: Z @join__field(graph: TWO, type: "Z")
}

type R @join__type(graph: ONE_T_R_0) {
  id: ID! @join__field(graph: ONE_T_R_0, type: "ID!")
}

enum custom__Enum @join__type(graph: TWO) {
  ONE @join__enumValue(graph: TWO)
  TWO @join__enumValue(graph: TWO)
}

enum custom__Enum3 @join__type(graph: TWO) {
  ONE @join__enumValue(graph: TWO)
  TWO @join__enumValue(graph: TWO)
}

input custom__Input @join__type(graph: TWO) {
  one: String @join__field(graph: TWO, type: "String")
  two: String @join__field(graph: TWO, type: "String")
}

input custom__Input3 @join__type(graph: TWO) {
  one: String @join__field(graph: TWO, type: "String")
  two: String @join__field(graph: TWO, type: "String")
}

scalar custom__Scalar @join__type(graph: TWO)

scalar custom__Scalar3 @join__type(graph: TWO)

type X @join__type(graph: TWO, key: "id") {
  id: ID! @join__field(graph: TWO, type: "ID!")
  w: String @join__field(graph: TWO, type: "String", contextArguments: [{context: "two__ctx", name: "z", type: "String", selection: " { y }"}])
}

type Z @join__type(graph: TWO, key: "id") @context(name: "two__ctx") {
  id: ID! @join__field(graph: TWO, type: "ID!")
  y: String @join__field(graph: TWO, type: "String") @custom(s: "x", e: ONE, i: {one: "one"})
  x: X @join__field(graph: TWO, type: "X") @custom3(s: "x", e: ONE, i: {one: "one"})
}

scalar context__ContextFieldValue

enum custom__Enum2 @join__type(graph: ONE_QUERY_TS_0) @join__type(graph: ONE_QUERY_T_0) @join__type(graph: ONE_T_R_0) {
  ONE @join__enumValue(graph: ONE_QUERY_TS_0) @join__enumValue(graph: ONE_QUERY_T_0) @join__enumValue(graph: ONE_T_R_0)
  TWO @join__enumValue(graph: ONE_QUERY_TS_0) @join__enumValue(graph: ONE_QUERY_T_0) @join__enumValue(graph: ONE_T_R_0)
}

input custom__Input2 @join__type(graph: ONE_QUERY_TS_0) @join__type(graph: ONE_QUERY_T_0) @join__type(graph: ONE_T_R_0) {
  one: String
  two: String
}

scalar custom__Scalar2 @join__type(graph: ONE_QUERY_TS_0) @join__type(graph: ONE_QUERY_T_0) @join__type(graph: ONE_T_R_0)

scalar policy__Policy

scalar requiresScopes__Scope

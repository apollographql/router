# Composed from subgraphs with hash: 799c11349d958543e444e53c4ed186a8e7f820f6
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.5", for: EXECUTION)
{
  query: Query
}

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean, overrideLabel: String, contextArguments: [join__ContextArgument!]) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

interface I
  @join__type(graph: SUBGRAPH1)
{
  a: Int
  b: Int
}

input join__ContextArgument {
  name: String!
  type: String!
  context: String!
  selection: join__FieldValue!
}

scalar join__DirectiveArguments

scalar join__FieldSet

scalar join__FieldValue

enum join__Graph {
  SUBGRAPH1 @join__graph(name: "Subgraph1", url: "none")
  SUBGRAPH2 @join__graph(name: "Subgraph2", url: "none")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: SUBGRAPH1)
  @join__type(graph: SUBGRAPH2)
{
  noProvides: I @join__field(graph: SUBGRAPH1)
  withProvidesOnA: I @join__field(graph: SUBGRAPH1, provides: "... on T2 { a }")
  withProvidesOnB: I @join__field(graph: SUBGRAPH1, provides: "... on T2 { b }")
}

type T1 implements I
  @join__implements(graph: SUBGRAPH1, interface: "I")
  @join__type(graph: SUBGRAPH1, key: "id")
  @join__type(graph: SUBGRAPH2, key: "id")
{
  id: ID!
  a: Int @join__field(graph: SUBGRAPH1)
  b: Int @join__field(graph: SUBGRAPH1, external: true) @join__field(graph: SUBGRAPH2)
}

type T2 implements I
  @join__implements(graph: SUBGRAPH1, interface: "I")
  @join__type(graph: SUBGRAPH1, key: "id")
  @join__type(graph: SUBGRAPH2, key: "id")
{
  id: ID!
  a: Int @join__field(graph: SUBGRAPH1, external: true) @join__field(graph: SUBGRAPH2)
  b: Int @join__field(graph: SUBGRAPH1, external: true) @join__field(graph: SUBGRAPH2)
}

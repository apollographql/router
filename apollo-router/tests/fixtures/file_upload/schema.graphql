schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  UPLOADS @join__graph(name: "uploads", url: "http://127.0.0.1:4005/")
  UPLOADS_CLONE @join__graph(name: "uploads_clone", url: "http://127.0.0.1:4006/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}


scalar Upload
  @join__type(graph: UPLOADS)
scalar UploadClone
  @join__type(graph: UPLOADS_CLONE)

type File
  @join__type(graph: UPLOADS)
{
  filename: String!
  mimetype: String!
  encoding: String!
  body: String!
}
type FileClone
  @join__type(graph: UPLOADS_CLONE)
{
  filename: String!
  mimetype: String!
  encoding: String!
  body: String!
}

input NestedUpload
  @join__type(graph: UPLOADS)
{
  file: Upload!
}

type Query
  @join__type(graph: UPLOADS)
  @join__type(graph: UPLOADS_CLONE)
{
  empty: String
}

type Mutation
  @join__type(graph: UPLOADS)
  @join__type(graph: UPLOADS_CLONE)
{
  singleUpload(file: Upload): File @join__field(graph: UPLOADS)
  singleUploadNonNull(file: Upload!): File! @join__field(graph: UPLOADS)
  singleUploadClone(file: UploadClone): FileClone @join__field(graph: UPLOADS_CLONE)
  multiUpload(files: [Upload!]!): [File!]! @join__field(graph: UPLOADS)
  nestedUpload(nested: NestedUpload): File @join__field(graph: UPLOADS)
}

# Composed from subgraphs with hash: 440d3c4bdff8acf74c9ca72961ae2f7bbb9f2223
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.5", for: EXECUTION)
{
  query: Query
}

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean, overrideLabel: String, contextArguments: [join__ContextArgument!]) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Foo
  @join__type(graph: SUBGRAPHA)
  @join__type(graph: SUBGRAPHB, key: "idA idB")
  @join__type(graph: SUBGRAPHC, key: "idA")
{
  idA: ID!
  idB: ID! @join__field(graph: SUBGRAPHA) @join__field(graph: SUBGRAPHB)
  bar: String! @join__field(graph: SUBGRAPHB) @join__field(graph: SUBGRAPHC)
}

input join__ContextArgument {
  name: String!
  type: String!
  context: String!
  selection: join__FieldValue!
}

scalar join__DirectiveArguments

scalar join__FieldSet

scalar join__FieldValue

enum join__Graph {
  SUBGRAPHA @join__graph(name: "subgraphA", url: "none")
  SUBGRAPHB @join__graph(name: "subgraphB", url: "none")
  SUBGRAPHC @join__graph(name: "subgraphC", url: "none")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: SUBGRAPHA)
  @join__type(graph: SUBGRAPHB)
  @join__type(graph: SUBGRAPHC)
{
  foo: Foo @join__field(graph: SUBGRAPHA)
}

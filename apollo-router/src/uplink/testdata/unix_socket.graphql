schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}


directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  PRODUCTS @join__graph(name: "products", url: "unix:///path/to/router.sock")
  REVIEWS @join__graph(name: "reviews", url: "http://localhost:4002/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Product
  @join__type(graph: PRODUCTS, key: "upc")
  @join__type(graph: REVIEWS, key: "upc")
  @authenticated
{
  upc: String!
  name: String! @join__field(graph: PRODUCTS)
  price: String! @join__field(graph: PRODUCTS) @authenticated
  related: Product! @join__field(graph: PRODUCTS)
  price1: String @join__field(graph: PRODUCTS)
  review: Review! @join__field(graph: REVIEWS) @requiresScopes(scopes: [["review"]])
}

type Query
  @join__type(graph: PRODUCTS)
  @join__type(graph: REVIEWS)
{
  products(limit: Int!, size: Int, random: String): [Product!]! @join__field(graph: PRODUCTS)
}

type Review
  @join__type(graph: REVIEWS)
{
  body: String!
  product: Product!
  body1: String
}

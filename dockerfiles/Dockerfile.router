FROM debian:bookworm-slim AS downloader
ARG ROUTER_RELEASE=latest
ARG ARTIFACT_URL=

# Install curl
RUN \
  apt-get update -y \
  && apt-get install -y \
    curl

WORKDIR /dist

# Run the Router downloader which puts Router into current working directory
RUN if [ -z "${ARTIFACT_URL}"]; then \
    curl -sSL https://router.apollo.dev/download/nix/${ROUTER_RELEASE}/ | sh; \
  else \
    cd /; \
    curl -sSL -o - ${ARTIFACT_URL} | tar -xzf -; \
    cd -; \
  fi

FROM debian:bookworm-slim AS distro
ARG DEBUG_IMAGE=false

# Add a user to run the router as
RUN useradd -m router

WORKDIR /dist

COPY --from=downloader /dist/router /dist

# Update apt and install ca-certificates
RUN \
  apt-get update -y \
  && apt-get install -y \
    ca-certificates

# If debug image, install heaptrack and make a data directory
RUN \
  if [ "${DEBUG_IMAGE}" = "true" ]; then \
    apt-get install -y heaptrack && \
    mkdir data && \
    chown router data; \
  fi

# Clean up apt lists
RUN rm -rf /var/lib/apt/lists/*

# Make directories for config and schema
RUN mkdir config schema

# Copy configuration for docker image
COPY dockerfiles/router.yaml config

LABEL org.opencontainers.image.authors="Apollo Graph, Inc. https://github.com/apollographql/router"
LABEL org.opencontainers.image.source="https://github.com/apollographql/router"

ENV APOLLO_ROUTER_CONFIG_PATH="/dist/config/router.yaml"

# Create a wrapper script to run the router, use exec to ensure signals are handled correctly
RUN \
  echo '#!/usr/bin/env bash \
\nset -e \
\n \
\nif [ -f "/usr/bin/heaptrack" ]; then \
\n    exec heaptrack -o /dist/data/router_heaptrack /dist/router "$@" \
\nelse \
\n    exec /dist/router "$@" \
\nfi \
' > /dist/router_wrapper.sh

# Make sure we can run our wrapper
RUN chmod 755 /dist/router_wrapper.sh

USER router

# Default executable is the wrapper script
ENTRYPOINT ["/dist/router_wrapper.sh"]

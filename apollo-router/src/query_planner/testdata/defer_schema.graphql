schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

directive @transform(from: String!) on FIELD

directive @stream on FIELD

scalar join__FieldSet

enum join__Graph {
  X @join__graph(name: "X", url: "http://X")
  Y @join__graph(name: "Y", url: "http://Y")
}

scalar link__Import

enum link__Purpose {
  SECURITY
  EXECUTION
}

type Query @join__type(graph: X) @join__type(graph: Y) {
  t: T @join__field(graph: X)
}

type T @join__type(graph: X, key: "id") {
  id: ID @join__field(graph: X)
  x: String @join__field(graph: X)
  y: String @join__field(graph: Y)
}

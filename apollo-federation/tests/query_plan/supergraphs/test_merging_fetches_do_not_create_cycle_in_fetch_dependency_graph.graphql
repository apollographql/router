# Composed from subgraphs with hash: 58cfa42df5c5f20fb0fbe43d4a506b3654439de1
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  A @join__graph(name: "A", url: "none")
  B @join__graph(name: "B", url: "none")
  C @join__graph(name: "C", url: "none")
  S @join__graph(name: "S", url: "none")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: A)
  @join__type(graph: B)
  @join__type(graph: C)
  @join__type(graph: S)
{
  start: T! @join__field(graph: S)
}

type T
  @join__type(graph: A, key: "id")
  @join__type(graph: B, key: "id")
  @join__type(graph: S, key: "id")
{
  id: String! @join__field(graph: A) @join__field(graph: B, external: true) @join__field(graph: S)
  u: U! @join__field(graph: A) @join__field(graph: B)
}

type U
  @join__type(graph: A, key: "id")
  @join__type(graph: B, key: "id")
  @join__type(graph: C, key: "id", extension: true)
{
  id: ID!
  a: String! @join__field(graph: A) @join__field(graph: B) @join__field(graph: C, external: true)
  b: String @join__field(graph: A) @join__field(graph: C, external: true)
  w: W @join__field(graph: C, requires: "a b")
}

type W
  @join__type(graph: B, key: "id", extension: true)
  @join__type(graph: C, key: "id")
{
  id: ID
  y: Y @join__field(graph: C)
  w1: Int @join__field(graph: C)
  w2: Int @join__field(graph: C)
  w3: Int @join__field(graph: C)
  w4: Int @join__field(graph: C)
  w5: Int @join__field(graph: C)
}

type Y
  @join__type(graph: C)
{
  y1: Int
  y2: Int
  y3: Int
}

---
source: apollo-federation/src/sources/connect/expand/tests/mod.rs
expression: connectors.by_service_name
input_file: apollo-federation/src/sources/connect/expand/tests/schemas/expand/simple.graphql
---
{
    "connectors_Query_users_0": Connector {
        id: ConnectId {
            label: "connectors.example http: GET ",
            subgraph_name: "connectors",
            source_name: Some(
                "example",
            ),
            directive: ObjectOrInterfaceFieldDirectivePosition {
                field: Object(Query.users),
                directive_name: "connect",
                directive_index: 0,
            },
        },
        transport: HttpJsonTransport {
            source_url: Some(
                Url {
                    scheme: "http",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: Some(
                        Domain(
                            "example",
                        ),
                    ),
                    port: None,
                    path: "/",
                    query: None,
                    fragment: None,
                },
            ),
            connect_template: URLTemplate {
                base: None,
                path: [],
                query: {},
            },
            method: Get,
            headers: {},
            body: None,
        },
        selection: Named(
            Parsed {
                node: SubSelection {
                    selections: [
                        Parsed {
                            node: Field(
                                None,
                                Parsed {
                                    node: Field(
                                        "id",
                                    ),
                                    loc: Some(
                                        (
                                            0,
                                            2,
                                        ),
                                    ),
                                },
                                None,
                            ),
                            loc: Some(
                                (
                                    0,
                                    2,
                                ),
                            ),
                        },
                        Parsed {
                            node: Field(
                                None,
                                Parsed {
                                    node: Field(
                                        "a",
                                    ),
                                    loc: Some(
                                        (
                                            3,
                                            4,
                                        ),
                                    ),
                                },
                                None,
                            ),
                            loc: Some(
                                (
                                    3,
                                    4,
                                ),
                            ),
                        },
                    ],
                    star: None,
                },
                loc: Some(
                    (
                        0,
                        4,
                    ),
                ),
            },
        ),
        config: None,
        max_requests: None,
        entity_resolver: None,
    },
    "connectors_Query_user_0": Connector {
        id: ConnectId {
            label: "connectors.example http: GET /{$args.id}",
            subgraph_name: "connectors",
            source_name: Some(
                "example",
            ),
            directive: ObjectOrInterfaceFieldDirectivePosition {
                field: Object(Query.user),
                directive_name: "connect",
                directive_index: 0,
            },
        },
        transport: HttpJsonTransport {
            source_url: Some(
                Url {
                    scheme: "http",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: Some(
                        Domain(
                            "example",
                        ),
                    ),
                    port: None,
                    path: "/",
                    query: None,
                    fragment: None,
                },
            ),
            connect_template: URLTemplate {
                base: None,
                path: [
                    Component {
                        parts: [
                            Var(
                                Variable {
                                    var_type: Args,
                                    path: "id",
                                    location: 2..10,
                                },
                            ),
                        ],
                    },
                ],
                query: {},
            },
            method: Get,
            headers: {},
            body: None,
        },
        selection: Named(
            Parsed {
                node: SubSelection {
                    selections: [
                        Parsed {
                            node: Field(
                                None,
                                Parsed {
                                    node: Field(
                                        "id",
                                    ),
                                    loc: Some(
                                        (
                                            0,
                                            2,
                                        ),
                                    ),
                                },
                                None,
                            ),
                            loc: Some(
                                (
                                    0,
                                    2,
                                ),
                            ),
                        },
                        Parsed {
                            node: Field(
                                None,
                                Parsed {
                                    node: Field(
                                        "a",
                                    ),
                                    loc: Some(
                                        (
                                            3,
                                            4,
                                        ),
                                    ),
                                },
                                None,
                            ),
                            loc: Some(
                                (
                                    3,
                                    4,
                                ),
                            ),
                        },
                        Parsed {
                            node: Field(
                                None,
                                Parsed {
                                    node: Field(
                                        "b",
                                    ),
                                    loc: Some(
                                        (
                                            5,
                                            6,
                                        ),
                                    ),
                                },
                                None,
                            ),
                            loc: Some(
                                (
                                    5,
                                    6,
                                ),
                            ),
                        },
                    ],
                    star: None,
                },
                loc: Some(
                    (
                        0,
                        6,
                    ),
                ),
            },
        ),
        config: None,
        max_requests: None,
        entity_resolver: Some(
            Explicit,
        ),
    },
    "connectors_User_d_1": Connector {
        id: ConnectId {
            label: "connectors.example http: GET /{$this.c}/d",
            subgraph_name: "connectors",
            source_name: Some(
                "example",
            ),
            directive: ObjectOrInterfaceFieldDirectivePosition {
                field: Object(User.d),
                directive_name: "connect",
                directive_index: 1,
            },
        },
        transport: HttpJsonTransport {
            source_url: Some(
                Url {
                    scheme: "http",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: Some(
                        Domain(
                            "example",
                        ),
                    ),
                    port: None,
                    path: "/",
                    query: None,
                    fragment: None,
                },
            ),
            connect_template: URLTemplate {
                base: None,
                path: [
                    Component {
                        parts: [
                            Var(
                                Variable {
                                    var_type: This,
                                    path: "c",
                                    location: 2..9,
                                },
                            ),
                        ],
                    },
                    Component {
                        parts: [
                            Text(
                                "d",
                            ),
                        ],
                    },
                ],
                query: {},
            },
            method: Get,
            headers: {},
            body: Some(
                Named(
                    Parsed {
                        node: SubSelection {
                            selections: [
                                Parsed {
                                    node: Path(
                                        Parsed {
                                            node: Alias {
                                                name: Parsed {
                                                    node: Field(
                                                        "with_b",
                                                    ),
                                                    loc: Some(
                                                        (
                                                            0,
                                                            6,
                                                        ),
                                                    ),
                                                },
                                            },
                                            loc: Some(
                                                (
                                                    0,
                                                    7,
                                                ),
                                            ),
                                        },
                                        Parsed {
                                            node: PathSelection {
                                                path: Parsed {
                                                    node: Var(
                                                        Parsed {
                                                            node: $this,
                                                            loc: Some(
                                                                (
                                                                    8,
                                                                    13,
                                                                ),
                                                            ),
                                                        },
                                                        Parsed {
                                                            node: Key(
                                                                Parsed {
                                                                    node: Field(
                                                                        "b",
                                                                    ),
                                                                    loc: Some(
                                                                        (
                                                                            14,
                                                                            15,
                                                                        ),
                                                                    ),
                                                                },
                                                                Parsed {
                                                                    node: Empty,
                                                                    loc: None,
                                                                },
                                                            ),
                                                            loc: Some(
                                                                (
                                                                    13,
                                                                    15,
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                    loc: Some(
                                                        (
                                                            8,
                                                            15,
                                                        ),
                                                    ),
                                                },
                                            },
                                            loc: Some(
                                                (
                                                    8,
                                                    15,
                                                ),
                                            ),
                                        },
                                    ),
                                    loc: Some(
                                        (
                                            0,
                                            15,
                                        ),
                                    ),
                                },
                            ],
                            star: None,
                        },
                        loc: Some(
                            (
                                0,
                                15,
                            ),
                        ),
                    },
                ),
            ),
        },
        selection: Path(
            Parsed {
                node: PathSelection {
                    path: Parsed {
                        node: Var(
                            Parsed {
                                node: $,
                                loc: Some(
                                    (
                                        0,
                                        1,
                                    ),
                                ),
                            },
                            Parsed {
                                node: Empty,
                                loc: None,
                            },
                        ),
                        loc: Some(
                            (
                                0,
                                1,
                            ),
                        ),
                    },
                },
                loc: Some(
                    (
                        0,
                        1,
                    ),
                ),
            },
        ),
        config: None,
        max_requests: None,
        entity_resolver: Some(
            Implicit,
        ),
    },
}
